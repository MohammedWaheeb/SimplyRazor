@namespace SW.SimplyRazor
@inject IJSRuntime JSRuntime
@inject ApiService apiClient

<select id="@Id" @ref="inputRef" @attributes="UnmatchedAttributes">
    @*<option value="0" selected disabled>Please enter your address.</option>*@
</select>

<SimplyQuery QueryUrl="@queryUrl" OnResult="OnQueryResult" TResponse="Dictionary<string,string>"></SimplyQuery>
<SimplyQuery QueryUrl="@queryValueUrl" OnResult="OnQueryValueResult" TResponse="string"></SimplyQuery>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public object Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public int TypeAhead { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    ElementReference inputRef;
    object inputValue;
    string queryUrl;
    string queryValueUrl;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == null) Id = $"dt_{Guid.NewGuid().ToString("N")}";

            await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.init",
                inputRef,
                DotNetObjectReference.Create(this),
                Id,
                TypeAhead == 0 ? 1 : TypeAhead);

            if (Value != null)
            {
                queryValueUrl = $"{Lookup}/{Value}?lookup=true";
                StateHasChanged();
            }
        }
    }

    Debouncer StepperDeboucer = new Debouncer(); // one second

    [JSInvokable]
    async public Task OnSearch(string value, int resultCount)
    {
        await StepperDeboucer.Debouce(async () =>
        {
            queryUrl = $"{Lookup}?lookup=true&search={value}";
            await InvokeAsync(() => StateHasChanged());
        });
    }

    [JSInvokable]
    async public Task OnChange(string value)
    {
        await ValueChanged.InvokeAsync(value);
    }

    async Task OnQueryResult(ApiResult<Dictionary<string, string>> apiResult)
    {
        if (apiResult.Success)
            await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.setChoices", Id, apiResult.Response.ToArray(), "Key", "Value");
    }

    async Task OnQueryValueResult(ApiResult<string> apiResult)
    {
        if (apiResult.Success)
            await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.setChoices", Id, new[] { new { Key = Value, Value = apiResult.Response, selected = true } }, "key", "value");
    }
}
