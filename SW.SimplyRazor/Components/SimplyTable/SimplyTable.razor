@typeparam TModel
@implements ISimplyTable
@namespace SW.SimplyRazor
@inject NotifyService  notify

@using System.Linq

<div>
    <CascadingValue Value="this" Name="Table">
        <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => AddModel()"><span class="oi oi-plus" /></button>

        @Header
    </CascadingValue>
</div>

@if (Value?.Count > 0)
{
    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <CascadingValue IsFixed="true" Value="FieldRole.ColumnName" Name="RenderMode">
                    <CascadingValue Value="Value.First()" Name="Model">
                        @Columns
                    </CascadingValue>
                </CascadingValue>
                <th>

                </th>
            </tr>

        </thead>
        <tbody>
            @for (var i = 0; i < Value.Count; i++)
            {
                var itemIndex = i;
                <tr @key="Value.GetAt(itemIndex)">
                    <CascadingValue IsFixed="true" Value="FieldRole.ColumnValue" Name="RenderMode">
                        <CascadingValue Value="Value.GetAt( itemIndex)" Name="Model">
                            @Columns
                        </CascadingValue>
                    </CascadingValue>
                    <td>
                        <button @onclick="(()=> RemoveModel(itemIndex))" class="btn btn-outline-secondary btn-sm"><span class="oi oi-x" /></button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@if (beingEditedModel != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog modal-dialog-scrollable" role="document" style="display:block">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"></h5>
                </div>
                <div class="modal-body">
                    <SimplyForm Value="beingEditedModel">
                        @Form
                    </SimplyForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="()=> OnFormSubmit()">Ok</button>
                    <button type="button" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public ICollection<TModel> Value { get; set; }

    [Parameter]
    public EventCallback<ICollection<TModel>> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment Form { get; set; }

    TModel beingEditedModel;
    int beingEditedModelIndex;


    public Task AddModel()
    {
        beingEditedModelIndex = (Value == null) ? 0 : Value.Count;
        beingEditedModel = Activator.CreateInstance<TModel>();
        //StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ChangeModel(int index)
    {
        beingEditedModelIndex = index;
        beingEditedModel = Object.DeepClone(Value.GetAt(index));
        //StateHasChanged();
        return Task.CompletedTask;
    }

    async public Task RemoveModel(int index)
    {

        await OnItem.InvokeAsync(new TableItem<TModel>
        {
            Item = Value.GetAt(index),
            Flag = TableItemFlag.Removed
        });

        Value.RemoveAt(index);

        //StateHasChanged();

    }

    async Task OnFormSubmit()
    {
        try
        {


            if (beingEditedModelIndex == 0 && Value == null || beingEditedModelIndex == Value.Count)
            {
                if (Value == null) Value = new List<TModel>();

                await OnItem.InvokeAsync(new TableItem<TModel>
                {
                    Item = beingEditedModel,
                    Flag = TableItemFlag.Added
                });

                Value.Add((TModel)beingEditedModel);
            }
            else
            {
                await OnItem.InvokeAsync(new TableItem<TModel>
                {
                    Item = beingEditedModel,
                    Flag = TableItemFlag.Changed
                });

                Object.DeepClone(beingEditedModel, Value.GetAt(beingEditedModelIndex));
            }

            await ValueChanged.InvokeAsync(Value);
            beingEditedModel = default(TModel);

        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Warning });
        }
    }

}
