@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService
@using Newtonsoft.Json

<button disabled="@working" type="button" @onclick="ButtonOnClick" @attributes="UnmatchedAttributes">
    @if (working)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    }
    else
    {
        @Title
    }
</button>

<SimplyConfirm @bind-Visible="confirmVisible" Title="@Title" OnResult="OnConfirmResult" @bind-Working="working">
    @if (ChildContent == null)
    {
        <p>This action might be irriversible. Are you sure you want to perform this action?</p>
    }
    else
    {
        @ChildContent
    }
</SimplyConfirm>

@code {

    bool working;
    bool confirmVisible;


    [Parameter]
    public string CommandUrl { get; set; }

    [Parameter]
    public object Request { get; set; }

    [Parameter]
    public EventCallback<ApiResult<TResponse>> OnResult { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    [Parameter]
    public ApiMethod Method { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool Confirm { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    async Task OnConfirmResult(bool result)
    {
        if (result) await PerformAction();
    }

    async Task ButtonOnClick(EventArgs args)
    {
        if (Confirm)
        {
            confirmVisible = true;
            return;
        };

        await PerformAction();

    }

    async Task PerformAction()
    {
        working = true;

        ApiResult<TResponse> result;

        switch (Method)
        {
            case ApiMethod.Post:
            case ApiMethod.Default:
                result = await apiService.PostAsync<TResponse>(CommandUrl, Request);
                break;

            case ApiMethod.Delete:
                var result1 = await apiService.DeleteAsync(CommandUrl);

                result = new ApiResult<TResponse>
                {
                    StatusCode = result1.StatusCode,
                    Success = result1.Success
                };

                break;

            default:
                throw new NotImplementedException();
        }

        await notify.NotifyOnApiResult(result);


        await OnResult.InvokeAsync(result);
        working = false;

    }
}
