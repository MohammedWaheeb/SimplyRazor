@typeparam TModel
@namespace SW.SimplyRazor
@inject MapiClientFactory mapiClientFactory
@inject NavigationManager nav
@inject NotifyService notify
@implements ISimplySearch
@inject IJSRuntime JSRuntime
@using SW.ModelApi


<CascadingValue Value="this" Name="Search">
    @Filters
    @Columns
</CascadingValue>



<form id="searchform" @onsubmit="()=> Search()"></form>

<div class="form-group row">
    <label for="filterSelect" class="col-sm-1 col-form-label">Search</label>
    <div class="col-sm-5 input-group ">
        <SimplySelect @bind-Value="filterValue"
                      EmptyText="Select filter"
                      Items="@(filterConfigs.Select(e=>e.Text).ToList())" />

        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="FilterAddOnClick">Add</button>
        </div>
    </div>
    <div class="col-sm-6 text-right">
        <SimplyButton form="searchform" class="btn btn-secondary" style="width: 120px;" type="submit">Search</SimplyButton>
    </div>
</div>

@for (int i = 0; i < filters.Count; i++)
{
    int index = i;
    <div class="form-group row" @key="filters[index]">
        <div class=" input-group col">

            <div class="input-group-prepend">
                <span class="input-group-text" id="">@filters[index].Text</span>
            </div>

            <SimplySelect @bind-value="filters[index].Rule"
                          Items="filters[index].Rules"
                          TKey="SearchyRule" />

            @switch (filters[index].Type)
            {
                case SearchyDataType.Text:

                    <input @bind="filters[index].ValueString" type="text" class="form-control" form="searchform" required="@filters[index].Required" />
                    break;

                case SearchyDataType.Number:

                    <input @bind="filters[index].ValueDecimal" type="number" class="form-control" form="searchform" required="@filters[index].Required" />
                    break;

                case SearchyDataType.Date:

                    <input @bind="filters[index].ValueDateTime" type="date" class="form-control" form="searchform" required="@filters[index].Required" />
                    break;

            }
            <div class="input-group-append">
                <button @onclick="@(e => RemoveFilter(index))" class="btn btn-outline-secondary" type="button"><span class="oi oi-x" /></button>
            </div>
        </div>
    </div>
}

<div @ref="tableElementRef" />


@code{


    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    int filterValue;
    List<FilterModel> filters;


    Task FilterAddOnClick(object e)
    {
        if (filterValue > 0)
        {
            filters.Add(new FilterModel(filterConfigs[filterValue - 1]));
            filterValue = 0;
        }
        return Task.CompletedTask;
    }

    async Task RemoveFilter(int index)
    {
        if (filters[index].Required)
            await notify.Publish(new UserMessage { Body = "This filter is required for search.", Level = AttentionLevel.Warning });
        else
            filters.RemoveAt(index);
    }


    protected async override Task OnInitializedAsync()
    {
        columns = new List<ISimplyColumn>();

        filters = new List<FilterModel>();
        filterConfigs = new List<ISearchyFilterSetup>();
        var client = mapiClientFactory.GetClient<TModel>();
        filterConfigs.AddRange(await client.GetFilterConfigs());

        foreach (var fc in filterConfigs)

            if (fc.Default || fc.Required) filters.Add(new FilterModel(fc) { Rule = fc.Rules.First() });

    }

    async protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && tableElementRef.Id != null)
        {

            wrapper = new SimplySearchInterop(this, JSRuntime, notify, mapiClientFactory.GetClient<TModel>().GetUri().ToString());
            await wrapper.Initialize(tableElementRef, columns);

        }
    }


    ElementReference tableElementRef;
    SimplySearchInterop wrapper;
    bool searching;

    async Task Search()
    {

        try
        {

            await wrapper.SetFilter(filters);

        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Error });
        }
        finally
        {
            searching = false;
        }
    }


    //Debouncer StepperDeboucer = new Debouncer(1000); // one second


    //private async Task FilterOnInput(ChangeEventArgs args)
    //{
    //    await StepperDeboucer.Debouce(() => { Console.WriteLine(args.Value); });
    //}

    List<ISearchyFilterSetup> filterConfigs;

    public void AddFilterConfig(ISearchyFilterSetup filter)
    {
        filterConfigs.Add(filter);
    }

    public void RemoveFilterConfig(ISearchyFilterSetup filter)
    {
        filterConfigs.Remove(filter);
    }

    List<ISimplyColumn> columns;

    public void AddColumn(ISimplyColumn column)
    {
        columns.Add(column);
    }
    public void RemoveColumn(ISimplyColumn column)
    {
        columns.Remove(column);
    }

}
