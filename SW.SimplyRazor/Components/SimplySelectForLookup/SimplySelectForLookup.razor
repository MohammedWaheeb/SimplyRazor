@typeparam TKey
@namespace SW.SimplyRazor
@inject LookupClient lookupService
@inject NavigationManager nav

@if (items == null)
{
    <div class="spinner-grow" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <select @onchange="SelectValueChanged" @attributes="UnmatchedAttributes">
        @if (EmptyText != null)
        {
            <option selected="@(Value == null || emptyValue==Value.ToString())" value="@emptyValue">@EmptyText</option>
        }
        @foreach (var item in items)
        {
            <option selected="@(Value != null && item.Key.ToString()==Value.ToString() )" value="@item.Key">@item.Value</option>
        }
    </select>
}

@code {

    [Parameter]
    public TKey Value { get; set; }

    [Parameter]
    public EventCallback<TKey> ValueChanged { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public TKey EmptyValue { get; set; }

    string emptyValue => EmptyValue == null ? " " : EmptyValue.ToString();

    [Parameter]
    public string EmptyText { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }


    async protected override Task OnInitializedAsync()
    {
        lookupService.Client.BaseAddress = new Uri("http://localhost/");
        items = await lookupService.Search(Lookup);
    }

    IEnumerable<KeyValuePair<object, string>> items;

    async Task SelectValueChanged(ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            Value = default(TKey);
            await ValueChanged.InvokeAsync(Value);
        }
        else
        {
            if (typeof(TKey) == typeof(string))
            {
                Value = (TKey)args.Value;
                await ValueChanged.InvokeAsync(Value);
            }
            else if (typeof(TKey) == typeof(int))
            {
                Value = (TKey)(object)int.Parse(args.Value.ToString());
                await ValueChanged.InvokeAsync(Value);
            }
            else if (typeof(TKey) == typeof(object))
            {
                Value = (TKey)args.Value;
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }


}
