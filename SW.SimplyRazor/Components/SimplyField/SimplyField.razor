@namespace SW.SimplyRazor
@implements ISimplyField
@implements IDisposable



@{
    switch (RenderMode)
    {
        case FieldRole.Input:
            {
                if (fieldState.ShowsOn == FieldShowsOn.Always || fieldState.ShowsOn == FieldShowsOn.Edit)
                {
                    <div class="@((Grouped) ? "col" : "form-group")">

                        @editor

                        @if (fieldState.IsInvalid)
                        {
                            <div class="invalid-feedback">
                                @fieldState.InvalidFeedback
                            </div>
                        }

                        @if (fieldState.Help != null)
                        {
                            <small class="form-text text-muted">@fieldState.Help</small>
                        }
                    </div>
                }
                break;
            }
        case FieldRole.ColumnValue:
            {
                if (fieldState.ShowsOn == FieldShowsOn.Always || fieldState.ShowsOn == FieldShowsOn.List)
                {

                    <td>
                        @if (ColumnValue == null)
                        {
                            @fieldState.Value

                        }
                        else
                        {
                            @ColumnValue(fieldState)
                        }
                    </td>

                }
                break;
            }

        case FieldRole.ColumnName:
            {
                if (fieldState.ShowsOn == FieldShowsOn.Always || fieldState.ShowsOn == FieldShowsOn.List)
                {
                    <th scope="col">
                        @if (ColumnHeader == null)
                        {
                            @fieldState.Text

                        }
                        else
                        {
                            @ColumnHeader(fieldState)
                        }
                    </th>
                }
                break;
            }
    }
}

@code {

[CascadingParameter(Name = "Form")]
public ISimplyForm Form { get; set; }

[CascadingParameter(Name = "Model")]
public object Model { get; set; }

[CascadingParameter(Name = "RenderMode")]
public FieldRole RenderMode { get; set; }

[CascadingParameter(Name = "Grouped")]
public bool Grouped { get; set; }

[Parameter]
public string Lookup { get; set; }

[Parameter]
public string Name { get; set; }

[Parameter]
public Type Editor { get; set; }

[Parameter]
public string Text { get; set; }

[Parameter]
public RenderFragment<FieldState> ColumnHeader { get; set; }

[Parameter]
public RenderFragment<FieldState> ColumnValue { get; set; }


[Parameter]
public FieldShowsOn ShowsOn { get; set; }

[Parameter]
public string Help { get; set; }

[Parameter(CaptureUnmatchedValues = true)]
public Dictionary<string, object> UnmatchedAttributes { get; set; }

public string FormId => Form.Id;

RenderFragment editor;

RenderFragment CreateEditor() => builder =>
{

    builder.OpenComponent(0, fieldState.Editor);
    builder.AddAttribute(1, "State", fieldState);
    builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<object>(this, OnChange));
    builder.AddMultipleAttributes(3, UnmatchedAttributes);
    builder.CloseComponent();

};


FieldState fieldState;

protected override void OnInitialized()
{

    fieldState = new FieldState(this, Model);
    Form.AddField(fieldState);

    if (RenderMode == FieldRole.Input) editor = CreateEditor();
    //{

    //    //}
}

async Task OnChange(object value)
{
    if (fieldState.TrySetValue(value)) await Form.FieldValueChanged(fieldState.Name);
}

void IDisposable.Dispose()
{
    if (RenderMode == FieldRole.Input)
    {
        Form.RemoveField(Name);
    }

}
}
