@namespace SW.SimplyRazor
@inject IJSRuntime JSRuntime
@inject ComponentOptions componentOptions
@using SW.PrimitiveTypes

<div class="input-group">
    <div class="input-group-prepend">
        <span class="input-group-text">
            @if (saving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>

            }
            else if (saved)
            {
                @:Done
            }
            else
            {
                @:Upload
            }
        </span>
    </div>
    <div class="custom-file">

        <input class="custom-file-input"
               @ref="inputRef"
               @onchange="InputOnChange"
               type="file"
               @attributes="UnmatchedAttributes" />

        <label class="custom-file-label" for="customFile">Select</label>

    </div>
    @if (error != null)
    {
        <div class="invalid-feedback">
            @error
        </div>
    }

</div>

@if (saving)
{
    <div style="top:0;  left:0; position:fixed; width: 100%;height :100%;z-index:1060; ">
    </div>
}


@code {

    ElementReference inputRef;

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //styling
            await JSRuntime.InvokeVoidAsync("simplyUploadInterop.init");
        }
    }

    bool saving;
    bool saved;
    string error;

    async Task InputOnChange(ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            saved = false;
        }
        else
        {
            saving = true;

            try
            {
                var rb = await JSRuntime.InvokeAsync<RemoteBlob>("simplyUploadInterop.saveFile", inputRef, componentOptions.BlobsUri.ToString());
                await ValueChanged.InvokeAsync(rb);
                saving = false;
                saved = true;
            }
            catch (Exception ex)
            {
                //await ValueChanged.InvokeAsync(new InvalidFieldValue
                //{
                //    Message = ex.Message
                //});
                error = ex.Message;
                saving = false;
                saved = false;
            }
        }
    }
}
