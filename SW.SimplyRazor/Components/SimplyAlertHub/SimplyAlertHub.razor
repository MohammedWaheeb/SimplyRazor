@namespace SW.SimplyRazor
@implements ISimplyAlertHub

<SimplyNotify Notification="UserMessage" OnReceived="OnUserMessageReceived" />

@for (int i = 0; i < alerts.Count; i++)
{
    var index = i;

    <CascadingValue Value="this" Name="AlertHub">
        <SimplyAlert @key="alerts[index]" Id="@alerts[index].Id" Body="@alerts[index].Body" Level="alerts[index].Level"></SimplyAlert>
    </CascadingValue>
}

@code {
    
    List<Alert> alerts;

    protected override void OnInitialized()
    {
        alerts = new List<Alert>();
    }

    private class Alert
    {
        public string Id { get; set; }
        public string Body { get; set; }
        public AttentionLevel Level { get; set; }
    }

    public void RemoveAlert(string id)
    {

        alerts.Remove(alerts.Where(a => a.Id == id).Single());
        StateHasChanged();
    }

    void OnUserMessageReceived(UserMessage message)
    {
        alerts.Add(new Alert
        {
            Id = Guid.NewGuid().ToString("N"),
            Level = message.Level,
            Body = message.Body
        });
    }

}
