
@namespace SW.SimplyRazor

<SimplyTable @bind-Value="wrapper" OnItem="OnItem" TModel="KeyValueWrapper" NewText="Add new..">

    <Columns>
        <Field Text="Action">
            <ColumnValue>
                <button type="button" class="btn btn-link" @onclick="@(() => context.Action.Invoke("remove", context.Model))">Remove</button>
            </ColumnValue>
        </Field>
        <Field Name="Key" />
        <Field Name="Value" />
    </Columns>
    <Form>
        <Field Name="Key" />
        <Field Name="Value" />
    </Form>
</SimplyTable>

@code {


    [Parameter]
    public IDictionary<string, string> Value { get; set; }

    [Parameter]
    public EventCallback<IDictionary<string, string>> ValueChanged { get; set; }

    [Parameter]
    public string KeyLookup { get; set; }

    [Parameter]
    public string ValueLookup { get; set; }

    ICollection<KeyValueWrapper> wrapper;

    protected override void OnInitialized()
    {
        if (Value != null)
        {
            var _wrapper = new List<KeyValueWrapper>();

            foreach (var item in Value)
            {
                _wrapper.Add(new KeyValueWrapper 
                {
                    Key = item.Key,
                    Value = item.Value
                });

            }

            wrapper = _wrapper;
        }
    }

    async Task OnItem(TableItem<KeyValueWrapper> tableItem)
    {
        if (Value == null) Value = new Dictionary<string, string>();

        if (tableItem.Flag == TableItemFlag.Added)
            Value.Add(tableItem.Item.Key, tableItem.Item.Value);

        if (tableItem.Flag == TableItemFlag.Removed)
            Value.Remove(tableItem.Item.Key);

        await ValueChanged.InvokeAsync(Value);

    }

}
