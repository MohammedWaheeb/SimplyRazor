@namespace SW.SimplyRazor

@if (!string.IsNullOrEmpty(State.Text))
{
    <label for="@State.Id">@State.Text</label>
}

@if (inputType == "textarea")
{
    <textarea id="@State.Id"
              rows="3"
              value="@State.Value"
              class="form-control @((State.IsInvalid ? "is-invalid" : null))"
              disabled="@State.ReadOnly"
              placeholder="@State.Placeholder"
              @onchange="(e)=> ValueChanged.InvokeAsync(e.Value)"
              @attributes="UnmatchedAttributes">@State.Value</textarea>

}
else
{
    <input id="@State.Id"
           value="@State.Value"
           type="@inputType"
           class="form-control @((State.IsInvalid ? "is-invalid" : null))"
           disabled="@State.ReadOnly"
           @onchange="(e)=> ValueChanged.InvokeAsync(e.Value)"
           @attributes="UnmatchedAttributes" />
}

@code {

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public IField State { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    string inputType;

    protected override void OnInitialized()
    {
        var nakedType = Nullable.GetUnderlyingType(State.PropertyInfo.PropertyType) ?? State.PropertyInfo.PropertyType;

        switch (Type.GetTypeCode(nakedType))
        {
            case TypeCode.Byte:
            case TypeCode.SByte:
            case TypeCode.UInt16:
            case TypeCode.UInt32:
            case TypeCode.UInt64:
            case TypeCode.Int16:
            case TypeCode.Int32:
            case TypeCode.Int64:
            case TypeCode.Decimal:
            case TypeCode.Double:
            case TypeCode.Single:

                inputType = "number";
                break;

            case TypeCode.DateTime:

                inputType = "text";
                break;

            default:

                if (State.PropertyInfo.PropertyType == typeof(string))
                {
                    switch (State.InputType)
                    {

                        case InputType.Multiline:

                            inputType = "textarea";
                            break;

                        case InputType.Password:

                            inputType = "password";
                            break;

                        case 0:
                            inputType = "text";
                            break;

                    }

                }
                else
                {
                    inputType = "text";
                }
                break;
        }


    }

}
