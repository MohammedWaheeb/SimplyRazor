@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService

@code {

    [Parameter]
    public string QueryUrl { get; set; }

    //[Parameter]
    //public EventCallback<string> QueryUrlChanged { get; set; }

    [Parameter]
    public TResponse Value { get; set; }

    [Parameter]
    public EventCallback<TResponse> ValueChanged { get; set; }

    [Parameter]
    public bool Ready { get; set; }

    [Parameter]
    public EventCallback<bool> ReadyChanged { get; set; }

    [Parameter]
    public bool Working { get; set; }

    [Parameter]
    public EventCallback<bool> WorkingChanged { get; set; }

    [Parameter]
    public EventCallback<object> OnSuccess { get; set; }

    [Parameter]
    public EventCallback<object> OnFailure { get; set; }


    async public override Task SetParametersAsync(ParameterView parameters)
    {

        var queryUrl = parameters.GetValueOrDefault<string>("QueryUrl");

        if (string.IsNullOrEmpty(queryUrl) || queryUrl == QueryUrl)
        {
            await base.SetParametersAsync(parameters);
            return;
        }

        await WorkingChanged.InvokeAsync(true);

        await base.SetParametersAsync(parameters);

        await Task.Delay(TimeSpan.FromMilliseconds(500));

        try
        {

            var result = await apiService.HttpClient.GetAsync(queryUrl);

            if ((int)result.StatusCode >= 200 && (int)result.StatusCode < 300)
            {
                if (typeof(TResponse) == typeof(string))

                    await ValueChanged.InvokeAsync((TResponse)(object)(await result.Content.ReadAsStringAsync()));

                else
                    await ValueChanged.InvokeAsync(await result.Content.ReadAsAsync<TResponse>());

                await OnSuccess.InvokeAsync(null);
            }
            else if ((int)result.StatusCode >= 400 && (int)result.StatusCode < 500)
            {

                var messages = await result.Content.ReadAsAsync<Dictionary<string, IEnumerable<string>>>();

                await notify.Publish(new UserMessage
                {
                    Body = "error",
                    Level = AttentionLevel.Warning
                });

                await OnFailure.InvokeAsync(null);
            }
            else if ((int)result.StatusCode >= 500)
            {
                await notify.Publish(new UserMessage
                {
                    Body = "server error",
                    Level = AttentionLevel.Error
                });

                await OnFailure.InvokeAsync(null);
            }

        }
        catch (Exception ex)
        {
            await OnFailure.InvokeAsync(null);
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Error });
        }
        finally
        {
            await ReadyChanged.InvokeAsync(true);
            await WorkingChanged.InvokeAsync(false);
        }
    }

    //async protected override Task OnInitializedAsync()
    //{


    //}
}
