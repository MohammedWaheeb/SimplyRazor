@namespace SW.SimplyRazor
@inject IJSRuntime JSRuntime
@inject ComponentOptions componentOptions
@using SW.PrimitiveTypes

<div class="input-group ">
    <div class="input-group-prepend">
        <span class="input-group-text">
            @if (saving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            else if (saved)
            {
                @:Done
            }
            else
            {
                @:Upload
            }
        </span>
    </div>
    <div class="custom-file">

        <input class="custom-file-input @((error == null) ? "" : "is-invalid")"
               id="custom1"
               @ref="inputRef"
               @onchange="InputOnChange"
               type="file"
               @attributes="UnmatchedAttributes" />

        <label class="custom-file-label" for="custom1">@Placeholder</label>
    </div>
</div>

@if (error != null)
{
    <div class="text-danger small">
        @error
    </div>
}

@if (saving)
{
    <div style="top:0;  left:0; position:fixed; width: 100%;height :100%;z-index:1060; "></div>
}

@code {

    ElementReference inputRef;

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //styling
            await JSRuntime.InvokeVoidAsync("simplyUploadInterop.init");
        }
    }

    bool saving;
    bool saved;
    string error;

    async Task InputOnChange(ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            await ValueChanged.InvokeAsync(null);
            error = null;
            saved = false;
            saving = false;
        }
        else
        {
            saving = true;

            try
            {
                long size = 0;
                if (UnmatchedAttributes.TryGetValue("size", out var sizeObject))
                {
                    size = long.Parse(sizeObject.ToString());
                }

                var apiResult = await JSRuntime.InvokeAsync<ApiResult<RemoteBlob>>("simplyUploadInterop.saveFile", inputRef, componentOptions.BlobsUri.ToString(), size);
                if (apiResult.Success)
                {
                    var rb = apiResult.Response;
                    await ValueChanged.InvokeAsync(rb);
                    error = null;
                    saving = false;
                    saved = true;
                }
                else
                {
                    if (apiResult.StatusCode < 500)
                        throw new SWException($"{apiResult.StatusCode}, {apiResult.Body}");

                    else
                        throw new SWException($"{apiResult.StatusCode}, server error.");

                }

            }
            catch (Exception ex)
            {
                await ValueChanged.InvokeAsync(null);
                error = $"Error: {ex.Message}";
                saving = false;
                saved = false;

            }
        }
    }
}
