@namespace SW.SimplyRazor


<SimplyTable @bind-Value="wrapper" OnItem="OnItem" TModel="KeyValueWrapper" Text="@State.Text" NewText="Add new..">
    <Columns>
        <Field >
            <ColumnHeader>
                Action (<a href="javascript:void();" @onclick="@(() => context.Action.Invoke("add", null))">add</a>)
            </ColumnHeader>
            <ColumnValue>
                <a href="javascript:void();"  @onclick="@(() => context.Action.Invoke("remove", context.Model))">Remove</a>
            </ColumnValue>
        </Field>
        <Field Name="Key" />
        <Field Name="Value" />
    </Columns>
    <Form>
        <Field Name="Key" />
        <Field Name="Value" />
    </Form>
</SimplyTable>

@code {

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public IField State { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    ICollection<KeyValueWrapper> wrapper;
    IDictionary<string, string> value { get; set; }

    protected override void OnInitialized()
    {
        if (State.Value != null)
        {

            value = (IDictionary<string, string>)State.Value;

            var _wrapper = new List<KeyValueWrapper>();

            foreach (var item in value)
            {
                _wrapper.Add(new KeyValueWrapper
                {
                    Key = item.Key,
                    Value = item.Value
                });

            }

            wrapper = _wrapper;
        }
    }

    async Task OnItem(TableItem<KeyValueWrapper> tableItem)
    {
        if (value == null) value = new Dictionary<string, string>();

        if (tableItem.Flag == TableItemFlag.Added)
            value.Add(tableItem.Item.Key, tableItem.Item.Value);

        if (tableItem.Flag == TableItemFlag.Removed)
            value.Remove(tableItem.Item.Key);

        await ValueChanged.InvokeAsync(value);

    }

}
