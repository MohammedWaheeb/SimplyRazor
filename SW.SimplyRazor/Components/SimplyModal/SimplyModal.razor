@namespace SW.SimplyRazor
@implements ISimplyModal
@inject IJSRuntime JSRuntime

<div @ref="modalRef" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable" role="document" @attributes="UnmatchedAttributes">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                @*<button type="reset" class="close" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>*@
            </div>
            <div class="modal-body">
                @Content(this)
            </div>
            <div class="modal-footer">
                @Footer(this)
                @*<button type="button" class="btn btn-secondary" @onclick="(()=> OnResponse.InvokeAsync(SimplyModalResponse.Closed))">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="(()=> OnResponse.InvokeAsync(SimplyModalResponse.Confirmed))">Ok</button>*@
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    [Parameter]
    public EventCallback<bool>  OnVisibilityChanged { get; set; }


    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment<ISimplyModal> Content { get; set; }

    [Parameter]
    public RenderFragment<ISimplyModal> Footer { get; set; }

    ElementReference modalRef;

    async protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("simplyModalInterop.showModal", 
                modalRef, 
                DotNetObjectReference.Create(this));
        }
    }

    async public Task Hide()
    {
        await JSRuntime.InvokeVoidAsync("simplyModalInterop.hideModal", modalRef);
    }

    [JSInvokable]
    public Task OnModalVisibilityChange(bool visible)
    {
        return OnVisibilityChanged.InvokeAsync(visible); 
    }



}
