@typeparam TModel
@namespace SW.SimplyRazor
@implements ISimplySearch
@implements ISimplySearchCommand
@inject NotifyService notify
@inject IServiceProvider serviceProvider

<CascadingValue IsFixed="true" Value="this" Name="Search">
    <CascadingValue IsFixed="true" Value="typeof(TModel)" Name="ModelType">
        <CascadingValue IsFixed="true" Value="FieldRole.Filter" Name="RenderMode">
            @Filters
        </CascadingValue>
    </CascadingValue>
</CascadingValue>
<Ready Value="searchState">
    <IsReady>

        @{
            int index = 0;

            foreach (var filter in searchState.Filters)
            {
                var f1 = filter;
                SimplySearchFilterSetup setup = null;

                if (f1.Field != null)
                    filterSetups.TryGetValue(f1.Field, out setup);

                <div class="row mb-2" @key="filter">
                    <div class="input-group col-6">
                        <div class="input-group-prepend">
                            <SimplySelect Value="filter.Field"
                                          ValueChanged="value => OnFilterChange(filter, value)"
                                          EmptyText="select"
                                          Items="filterSetups.ToDictionary(k => k.Key, v => v.Value.Text)"
                                          TKey="string"
                                          class="form-control" />

                        </div>

                        <SimplySelect Value="(int)filter.Rule"
                                      ValueChanged="value => OnRuleChange(filter, value)"
                                      Items="setup?.CompactRules ?? new Dictionary<string, string>()"
                                      TKey="int"
                                      class="form-control"
                                      style="max-width: 90px" />

                        <SimplyForm @bind-Value="f1">

                            @switch (setup?.Type)
                                {
                                    case SearchyDataType.Number:

                                    <Field Name="ValueDecimal" Text="" Lookup="@setup.Lookup" />
                                        break;

                                    case SearchyDataType.Date:

                                        if (filter.Rule == SearchyRule.Range)
                                        {
                                        <Field Name="ValueDateTimeArray" Text="" />
                                        }
                                        else
                                        {
                                        <Field Name="ValueDateTime" Text="" InputType="InputType.Calendar" />
                                        }

                                        break;


                                    case SearchyDataType.Text:


                                        if (setup.Lookup == null)
                                        {
                                        <Field Name="ValueString" Text="" />
                                        }
                                        else
                                        {
                                        <Field Name="ValueString" Text="" Lookup="@setup.Lookup" TypeAhead="@setup.TypeAhead" />
                                        }
                                        break;

                                    default:
                                    <Field Name="Value" Text="" />
                                        break;
                                }

                        </SimplyForm>

                        <div class="input-group-append">

                            @if (index == searchState.Filters.Count - 1)
                            {
                                <button @onclick="e => searchState.Filters.Add(new SimplySearchFilter())" class="btn btn-outline-secondary " type="button">+</button>
                            }
                            else
                            {
                                <button @onclick="e => searchState.Filters.Remove(filter)" class="btn btn-outline-secondary " type="button">x</button>
                            }

                        </div>

                    </div>
                    @if (index == 0)
                    {
                        <div class="col-auto pl-0">
                            <BusyButton OnClick="bb => DoSearch(0, bb)" class="btn btn-primary" style="width: 80px">
                                <Title>
                                    Search
                                </Title>
                            </BusyButton>

                            @if (Commands != null)
                            {
                                @Commands(this)
                            }
                        </div>
                    }
                </div>

                index++;
            }

            if (result != null && result.Result.Count() > 0)
            {
                <div class="mb-3 mt-4">
                    <SimplyTable Value="result.Result" Height="@Height" Width="@Width" Type="typeof(TModel)" OnItem="ti => OnTableItem(ti)">
                        <Columns>
                            @Columns
                        </Columns>
                    </SimplyTable>
                </div>
                <Pager TotalCount="result.TotalCount" Count="result.Result.Count()" Page="((SearchyRequest)Value).PageIndex" PageSize="PageSize" PageChanged="page => DoSearch(page)"></Pager>
            }


        }

    </IsReady>
</Ready>

@code{

    [Parameter]
    public IBasicApiClient ApiClient { get; set; }

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public RenderFragment<ISimplySearchCommand> Commands { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public object Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    SearchyResponse<TModel> result;
    SearchState searchState;

    async protected override Task OnParametersSetAsync()
    {
        if (Value == null)
            searchState = new SearchState(PageSize);
        else
        {
            searchState = new SearchState((SearchyRequest)Value);

            var apiClient = serviceProvider.GetApiClient(ApiClient);
            var apiResult = await apiClient.Search<TModel>
                ($"{SearchUrl}?{Value.ToString()}");

            await notify.NotifyOnApiResult(apiResult);
            if (apiResult.Success)
            {
                if (apiResult.Response.Result.Count() == 0)
                {
                    await notify.Publish(new UserMessage { Body = "Search returned no results.", Level = AlertLevel.Info });
                }
                result = apiResult.Response;
            }
        }
    }

    Task OnTableItem(TableItem tableItem)
    {
        return OnItem.InvokeAsync(new TableItem<TModel>
        {
            Flag = tableItem.Flag,
            Item = (TModel)tableItem.Item
        });
    }

    void OnRuleChange(SimplySearchFilter filter, int rule)
    {
        filter.Rule = (SearchyRule)rule;
        filter.Value = null;
    }

    void OnFilterChange(SimplySearchFilter filter, string value)
    {
        filter.Field = value;
        filter.Value = null;
        if (filter.Field == null)
            filter.Rule = default;
        else
            filter.Rule = (SearchyRule)int.Parse(filterSetups[filter.Field].CompactRules.First().Key);

    }

    async Task DoSearch(int page, IBusyButton bb = null)
    {
        var activeFilters = searchState.Filters.Where(filter =>
           filter.Value != null &&
           !string.IsNullOrEmpty(filter.Field) &&
           filter.Rule != default);

        var condition = new SearchyCondition();

        foreach (var f in activeFilters)
            condition.Filters.Add(new SearchyFilter(f.Field, f.Rule, f.Value));

        var newValue = new SearchyRequest(condition);
        newValue.PageIndex = page;
        newValue.PageSize = PageSize;

        if (bb != null) await bb.SetBusy(false);

        await ValueChanged.InvokeAsync(newValue);
    }

    IDictionary<string, SimplySearchFilterSetup> filterSetups = new Dictionary<string, SimplySearchFilterSetup>(StringComparer.OrdinalIgnoreCase);

    async public Task AddFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetups.Add(filter.Field, filter);
        await InvokeAsync(() => StateHasChanged());
    }

    public void RemoveFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetups.Remove(filter.Field);
    }

    public SearchyRequest SearchyRequest => (SearchyRequest)Value;

}
