@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService

@code {

    [Parameter]
    public string QueryUrl { get; set; }

    [Parameter]
    public TResponse Value { get; set; }

    [Parameter]
    public EventCallback<TResponse> ValueChanged { get; set; }

    [Parameter]
    public bool Ready { get; set; }

    [Parameter]
    public EventCallback<bool> ReadyChanged { get; set; }

    [Parameter]
    public EventCallback<object> OnFailure { get; set; }

    async protected override Task OnInitializedAsync()
    {

        await Task.Delay(TimeSpan.FromSeconds(1));

        try
        {

            var result = await apiService.HttpClient.GetAsync(QueryUrl);

            if ((int)result.StatusCode >= 200 && (int)result.StatusCode < 300)
            {
                if (typeof(TResponse) == typeof(string))

                    await ValueChanged.InvokeAsync((TResponse)(object)(await result.Content.ReadAsStringAsync()));

                else
                    await ValueChanged.InvokeAsync(await result.Content.ReadAsAsync<TResponse>());
            }
            else if ((int)result.StatusCode >= 400 && (int)result.StatusCode < 500)
            {

                var messages = await result.Content.ReadAsAsync<Dictionary<string, IEnumerable<string>>>();

                await notify.Publish(new UserMessage
                {
                    Body = "error",
                    Level = AttentionLevel.Warning
                });

                await OnFailure.InvokeAsync(null);
            }
            else if ((int)result.StatusCode >= 500)
            {
                await notify.Publish(new UserMessage
                {
                    Body = "server error",
                    Level = AttentionLevel.Error
                });

                await OnFailure.InvokeAsync(null);
            }

        }
        catch (Exception ex)
        {
            await OnFailure.InvokeAsync(null);
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Error });
        }
        finally
        {
            await ReadyChanged.InvokeAsync(true);
        }
    }
}
