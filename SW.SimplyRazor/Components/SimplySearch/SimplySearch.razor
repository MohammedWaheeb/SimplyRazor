@typeparam TModel
@namespace SW.SimplyRazor
@implements ISimplySearch
@inject NotifyService notify


<CascadingValue Value="this" Name="Search">
    @Filters
</CascadingValue>

<SimplyQuery QueryUrl="@FilterUrl" ValueChanged="FilterQueryValueChanged" TResponse="IEnumerable<SearchyFilterSetup>" @bind-Working="busy"></SimplyQuery>

<SimplyQuery QueryUrl="@query" @bind-Value="result" @bind-Working="busy"></SimplyQuery>

<div class="container-fluid">

    <div class="form-group row">
        <label for="filterSelect" class="col-sm-1 col-form-label">Search</label>
        <div class="col-sm-5 input-group ">
            <SimplySelect @bind-Value="filterValue"
                          EmptyText="Select filter"
                          Items="@(filterSetup.Select(e=>e.Text).ToList())" />

            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="FilterAddOnClick">Add</button>
            </div>
        </div>
        <div class="col-sm-6 text-right">
            <button type="button" @onclick="() => Search(0)" class="btn btn-secondary" style="width: 100px;">
                @if (busy)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    @:Search
                }
            </button>
        </div>
    </div>

    @for (int i = 0; i < filters.Count; i++)
    {
        int index = i;
        <div class="form-group row" @key="filters[index]">
            <div class=" input-group col">

                <div class="input-group-prepend">
                    <span class="input-group-text" id="">@filters[index].Text</span>
                </div>

                <SimplySelect @bind-value="filters[index].Rule"
                              Items="filters[index].Rules"
                              TKey="SearchyRule" />

                @switch (filters[index].Type)
                {
                    case SearchyDataType.Text:

                        <input @bind="filters[index].ValueString" type="text" class="form-control" />
                        break;

                    case SearchyDataType.Number:

                        <input @bind="filters[index].ValueDecimal" type="number" class="form-control" />
                        break;

                    case SearchyDataType.Date:

                        <input @bind="filters[index].ValueDateTime" type="date" class="form-control" />
                        break;

                }
                <div class="input-group-append">
                    <button @onclick="@(e => RemoveFilter(index))" class="btn btn-outline-secondary" type="button"><span class="oi oi-x" /></button>
                </div>
            </div>
        </div>
    }

</div>

<div class="container-fluid mt-5">
    @if (result?.TotalCount > 0)
    {
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <CascadingValue IsFixed="true" Value="FieldRole.ColumnName" Name="RenderMode">
                        <CascadingValue Value="result.Result.First()" Name="Model">
                            @Columns
                        </CascadingValue>
                    </CascadingValue>

                </tr>

            </thead>
            <tbody>
                @foreach (var item in result.Result)
                {
                    <tr @key="item" @onclick="() => RowClick(item)">
                        <CascadingValue IsFixed="true" Value="FieldRole.ColumnValue" Name="RenderMode">
                            <CascadingValue Value="item" Name="Model">
                                @Columns
                            </CascadingValue>
                        </CascadingValue>
                    </tr>
                }

            </tbody>
        </table>

        <SimplyPager Count="result.TotalCount" CurrentPage="page" PageSize="PageSize" CurrentPageChanged="page => Search(page)" ></SimplyPager>
    }
</div>

@code{

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public string FilterUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Index { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public EventCallback<TModel> OnRowClick { get; set; }

    int filterValue;
    List<FilterModel> filters = new List<FilterModel>();
    List<ISearchyFilterSetup> filterSetup = new List<ISearchyFilterSetup>();
    bool busy;
    int page;
    SearchyResponse<TModel> result;
    string query;


    Task FilterAddOnClick(object e)
    {
        if (filterValue > 0)
        {
            filters.Add(new FilterModel(filterSetup[filterValue - 1]));
            filterValue = 0;
        }
        return Task.CompletedTask;
    }

    async Task RemoveFilter(int index)
    {
        if (filters[index].Required)
            await notify.Publish(new UserMessage { Body = "This filter is required for search.", Level = AttentionLevel.Warning });
        else
            filters.RemoveAt(index);
    }

    void Search(int page)
    {

        var searchRequest = new SearchyRequest(new SearchyCondition(filters))
        {
            PageSize = PageSize,
            PageIndex = page
        };

        query = $"{SearchUrl}?{searchRequest.ToString()}";


        this.page = page;
        //StateHasChanged();

    }

    //Debouncer StepperDeboucer = new Debouncer(1000); // one second

    //private async Task FilterOnInput(ChangeEventArgs args)
    //{
    //    await StepperDeboucer.Debouce(() => { Console.WriteLine(args.Value); });
    //}

    async public Task AddFilterSetup(ISearchyFilterSetup filter)
    {
        filterSetup.Add(filter);
        if (filter.Default || filter.Required) filters.Add(new FilterModel(filter));
        await InvokeAsync(() => StateHasChanged());
    }

    async Task FilterQueryValueChanged(IEnumerable<SearchyFilterSetup> remoteFilterSetup)
    {
        foreach (var fc in remoteFilterSetup)

            await AddFilterSetup(fc);
    }

    public void RemoveFilterSetup(ISearchyFilterSetup filter)
    {
        filterSetup.Remove(filter);
    }

    async Task RowClick(TModel model)
    {
        await OnRowClick.InvokeAsync(model); 
    }

}
