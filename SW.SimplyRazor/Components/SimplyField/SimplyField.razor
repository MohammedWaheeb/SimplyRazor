@namespace SW.SimplyRazor
@implements ISimplyField
@implements IDisposable
@using SW.PrimitiveTypes
@using System.Reflection
@using Humanizer

@{
    switch (RenderMode)
    {
        case FieldRole.Input:
            {
                if (editorFragment != null && (ShowsOn == FieldShowsOn.Always || ShowsOn == FieldShowsOn.Edit))
                {
                    <div class="@((Grouped) ? "col" : "form-group")">

                        @editorFragment

                        @if (IsInvalid)
                        {
                            <div class="invalid-feedback">
                                @InvalidFeedback
                            </div>
                        }

                        @if (Help != null)
                        {
                            <small class="form-text text-muted">@Help</small>
                        }
                    </div>
                }
                break;
            }
        case FieldRole.ColumnValue:
            {
                if (ShowsOn == FieldShowsOn.Always || ShowsOn == FieldShowsOn.List)
                {

                    <td>
                        @if (ColumnValue == null)
                        {
                            @Value

                        }
                        else
                        {
                            @ColumnValue(this)
                        }
                    </td>

                }
                break;
            }

        case FieldRole.ColumnName:
            {
                if (ShowsOn == FieldShowsOn.Always || ShowsOn == FieldShowsOn.List)
                {
                    <th scope="col">
                        @if (ColumnHeader == null)
                        {
                            @Text

                        }
                        else
                        {
                            @ColumnHeader(this)
                        }
                    </th>
                }
                break;
            }
    }
}

@code {

    [CascadingParameter(Name = "Form")]
    public ISimplyForm Form { get; set; }

    [CascadingParameter(Name = "Model")]
    public dynamic Model { get; set; }

    [CascadingParameter(Name = "ModelType")]
    public Type ModelType { get; set; }

    [CascadingParameter(Name = "RenderMode")]
    public FieldRole RenderMode { get; set; }

    [CascadingParameter(Name = "Grouped")]
    public bool Grouped { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public string Name { get; set; }

    public Type Editor { get; set; }

    [Parameter]
    public RenderFragment<ISimplyField> ColumnHeader { get; set; }

    [Parameter]
    public RenderFragment<ISimplyField> ColumnValue { get; set; }

    [Parameter]
    public FieldShowsOn ShowsOn { get; set; }

    [Parameter]
    public string Help { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    public string FormId => Form.Id;

    public PropertyInfo PropertyInfo { get; private set; }

    string id;
    public string Id => id;

    string text = null;

    [Parameter]
    public string Text
    {
        get => (text == null) ? Name?.Humanize() : Text;
        set => text = value;
    }

    public string InvalidFeedback { get; set; }

    public bool IsInvalid => InvalidFeedback != null;

    public object Value
    {
        get
        {
            object obj = Model;

            for (int i = 0; i < nameArray.Length - 1; i++)

                if (obj != null) obj = obj.GetType().GetProperty(nameArray[i]).GetValue(obj);

            if (obj != null) return PropertyInfo.GetValue(obj);

            return null;
        }
    }

    RenderFragment editorFragment;

    RenderFragment CreateEditor() => builder =>
    {
        builder.OpenComponent(0, Editor);
        builder.AddAttribute(1, "State", this);
        builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<object>(this, OnChange));
        builder.AddMultipleAttributes(3, UnmatchedAttributes);
        builder.CloseComponent();

    };

    string[] nameArray;

    protected override void OnInitialized()
    {

        if (Model != null) ModelType = Model.GetType();
        if (ModelType == null) throw new ArgumentNullException();

        id = Name == null
            ? $"field{Guid.NewGuid().ToString("N")}"
            : $"{FormId}_{Name}".Replace(".", "_").ToLower();

        if (Name is null) return;

        nameArray = Name.Split('.');

        PropertyInfo = ModelType.GetProperty(nameArray[0]);

        for (int i = 1; i < nameArray.Length; i++)

            PropertyInfo = PropertyInfo.PropertyType.GetProperty(nameArray[i]);

        if (PropertyInfo.PropertyType == typeof(bool))
        {
            Editor = typeof(EditorForBoolean);
        }
        else if (PropertyInfo.PropertyType == typeof(RemoteBlob))
        {
            Editor = typeof(EditorForUpload);
        }
        else
        {
            Editor = (Lookup == null) ? typeof(EditorForText) : typeof(EditorForTextAsSelect);
        }

        Form.AddField(this);

        if (RenderMode == FieldRole.Input && Editor != null) editorFragment = CreateEditor();
    }

    async Task OnChange(object value)
    {
        if (TrySetValue(value)) await Form.FieldValueChanged(Name);
    }

    bool TrySetValue(object value)
    {

        if (Model == null) Model = Activator.CreateInstance(ModelType);

        object obj = Model;

        for (int i = 0; i < nameArray.Length - 1; i++)
        {
            var targetProp = obj.GetType().GetProperty(nameArray[i]);
            var nextType = targetProp.PropertyType;
            var nextObj = targetProp.GetValue(obj);
            if (nextObj == null)
            {
                nextObj = Activator.CreateInstance(nextType);
                targetProp.SetValue(obj, nextObj);
            }

            obj = nextObj;
        }

        try
        {
            var typedValue = Object.ConvertValueToType(value, PropertyInfo.PropertyType);
            PropertyInfo.SetValue(obj, typedValue);
            InvalidFeedback = null;
            return true;
        }
        catch (Exception)
        {
            InvalidFeedback = $"{value} is not {PropertyInfo.PropertyType.Name}";
            return false;
        }

        //}
        //catch (Exception)
        //{
        //    InvalidFeedback = "Failed to set value.";
        //    return false;
        //}
    }

    void IDisposable.Dispose()
    {
        if (RenderMode == FieldRole.Input)
        {
            Form.RemoveField(Name);
        }

    }
}
