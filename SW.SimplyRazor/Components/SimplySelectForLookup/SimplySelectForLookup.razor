@typeparam TKey
@namespace SW.SimplyRazor
@inject MapiClientFactory mapiClientFactory
@inject NavigationManager nav
@using SW.ModelApi

@if (items == null)
{
    <div class="spinner-grow" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <SimplySelect TKey="TKey" 
                  @attributes="UnmatchedAttributes" 
                  KeyValuePairList="items" 
                  Value="Value" 
                  ValueChanged="v => ValueChanged.InvokeAsync(v)" />
}

@code {

    [Parameter]
    public TKey Value { get; set; }

    [Parameter]
    public EventCallback<TKey> ValueChanged { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    async protected override Task OnInitializedAsync()
    {
        var client = mapiClientFactory.GetClient(Lookup);
        items = new List<KeyValuePair<TKey, string>>();

        IEnumerable<KeyValuePair<object, string>>  itemsRaw = await client.LookupList();
        foreach (var i in itemsRaw)
        {
            items.Add(new KeyValuePair<TKey, string> (Object.ConvertValueToType(i.Key.ToString(), typeof(TKey)), i.Value));
        }
    }

    ICollection<KeyValuePair<TKey, string>> items;

}
