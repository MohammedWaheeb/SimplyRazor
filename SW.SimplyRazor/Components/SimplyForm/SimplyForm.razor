@typeparam TModel
@implements ISimplyForm
@namespace SW.SimplyRazor
@using BlazorLob3.Extensions
@using FluentValidation

<form id="@Id"></form>
<CascadingValue IsFixed="true" Value="this" Name="Form">
    <CascadingValue Value="(object)Value" Name="Model">

        @ChildContent

    </CascadingValue>

</CascadingValue>

<button type="button" class="btn btn-primary" @onclick="ValidateOnClick">Validate</button>

@code {

    [Parameter]
    public TModel Value { get; set; }


    [Parameter]
    public EventCallback<TModel> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public AbstractValidator<TModel> Validator { get; set; }

    public string Id => "MainForm";


    //public object Model => (object)Value;


    //IList<FormFieldDetails> fields = new List<FormFieldDetails>();
    IDictionary<string, FieldState> fields = new Dictionary<string, FieldState>();

    protected override void OnInitialized()
    {
        //fields = new List<IFormField>();
    }

    public async Task FieldValueChanged(string name)
    {
        await ValueChanged.InvokeAsync(Value);
    }

    public void AddField(FieldState formField)
    {
        fields.Add(formField.Name, formField);
    }

    async Task ValidateOnClick(EventArgs args)
    {
        //AbstractValidator<TModel> validator = new EmployeeValidator();

        var result = await Validator.ValidateAsync(Value);

        foreach (var err in result.Errors)
        {
            var fld = fields[err.PropertyName];
            fld.InvalidFeedback = err.ErrorMessage;

        };


    }

    //public void AddField(IFormField formField)
    //{
    //    var formFieldDetails = new FormFieldDetails(formField, Value.GetType());


    //    fields.Add(formFieldDetails);
    //    StateHasChanged();
    //}

    //string GetFieldType(string name)
    //{
    //    var prop = Value.GetType().GetProperty(name);

    //    if (prop.PropertyType == typeof(int))
    //    {
    //        return "number";
    //    }
    //    else if (prop.PropertyType == typeof(string))
    //    {
    //        return "text";
    //    }
    //    else
    //    {
    //        return "text";
    //    }


    //}

    //object GetFieldValue(string name)
    //{
    //    var prop = Value.GetType().GetProperty(name);
    //    return prop.GetValue(Value);
    //}

    //async Task OnFieldChange(string name, object value)
    //{

    //    var prop = Value.GetType().GetProperty(name);
    //    try
    //    {
    //        var typedValue = value.ConvertObjectToType(prop.PropertyType);
    //        prop.SetValue(Value, typedValue);
    //        await ValueChanged.InvokeAsync(Value);

    //    }
    //    catch (Exception ex)
    //    {

    //        //StateHasChanged();
    //        Console.WriteLine(ex);
    //        //throw;
    //    }
    //}





}
