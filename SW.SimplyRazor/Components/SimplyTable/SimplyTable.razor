@typeparam TModel
@implements ISimplyForm
@namespace SW.SimplyRazor
@*@if (RenderMode != FieldRole.Input) { return; }*@

<div class="clearfix mt-2 mb-1">
    <label>@Display</label>
</div>

@if (Value.Count == 0)
{
    <p>Nothing to display, <button type="button" class="btn btn-link" @onclick="AddOnClick">click here</button> to add.</p>
}
else
{
    <div class="row">
        <div class="col">
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <CascadingValue Value="FieldRole.ColumnName" Name="RenderMode">
                            <SimplyForm Value="Value.First()">
                                @ChildContent
                            </SimplyForm>
                        </CascadingValue>
                        <th align="right" scope="col" style="width:95px;">
                            <button type="button" class="btn btn-outline-secondary btn-sm float-right" @onclick="AddOnClick"><span class="oi oi-plus" /></button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        for (var i = 0; i < Value.Count; i++)
                        {
                            var itemIndex = i;
                            <tr>
                                <CascadingValue Value="FieldRole.ColumnValue" Name="RenderMode">
                                    <SimplyForm Value="Value[itemIndex]">
                                        @ChildContent
                                    </SimplyForm>
                                </CascadingValue>
                                <td align="right">
                                    <button @onclick="(()=> EditModel(itemIndex))" class="btn btn-outline-secondary btn-sm"><span class="oi oi-pencil" /></button>
                                    <button @onclick="(()=> Value.RemoveAt(itemIndex))" class="btn btn-outline-secondary btn-sm"><span class="oi oi-x" /></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@{ if (beingEditedModel != null)
    {
        <form @onsubmit="OnFormSubmit" @onreset="OnFormReset" id="@Id"></form>
        <SimplyModal>
            <Content>
                <CascadingValue IsFixed="true" Value="this" Name="Form">
                    <CascadingValue Value="FieldRole.Input" Name="RenderMode">
                        <CascadingValue Value="beingEditedModel" Name="Model">
                            @ChildContent
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </Content>
            <Footer>
                <button type="reset" class="btn btn-secondary" form="@Id">Close</button>
                <button type="submit" class="btn btn-primary" form="@Id">Ok</button>
            </Footer>
        </SimplyModal>
    }
}


@code {

    [CascadingParameter(Name = "Form")]
    public ISimplyForm Form { get; set; }

    [CascadingParameter(Name = "Model")]
    public object Model { get; set; }

    [CascadingParameter(Name = "RenderMode")]
    public FieldRole RenderMode { get; set; }

    [Parameter]
    public IList<TModel> Value { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }



    [Parameter]
    public string Display { get; set; }

    [Parameter]
    public bool Edit { get; set; }

    [Parameter]
    public bool Add { get; set; }

    [Parameter]
    public bool Delete { get; set; }

    public string Id => Name;

    public IDictionary<string, FieldState> Fields { get; set; }

    object beingEditedModel = null;
    int beingEditedModelIndex;

    protected override void OnInitialized()
    {

        Fields = new Dictionary<string, FieldState>();

        if (Value != null) return;

        Type arrayType = Model.GetType();
        var childModel = Model;

        var arr = Name.Split('.');

        for (var i = 0; i < arr.Length; i++)
        {
            var pInfo = arrayType.GetProperty(arr[i]);
            arrayType = pInfo.PropertyType;
            childModel = pInfo.GetValue(childModel);
        };

        Value = ((IList<TModel>)childModel);



    }

    public Task FieldValueChanged(string name)
    {
        return Task.CompletedTask;
    }

    public void AddField(FieldState formField)
    {
        Fields.Add(formField.Name, formField);
    }

    public void RemoveField(string name)
    {
        Fields.Remove(name);
    }

    Task AddOnClick(EventArgs args)
    {
        beingEditedModelIndex = -1;
        beingEditedModel = Activator.CreateInstance<TModel>();// (modelType);
        return Task.CompletedTask;
    }

    async Task OnFormSubmit(EventArgs arg)
    {

        if (beingEditedModelIndex < 0)
        {
            Value.Add((TModel)beingEditedModel);
        }
        else
        {
            beingEditedModel.DeepCloneTo(Value[beingEditedModelIndex]);// = (TModel)beingEditedModel;
        }
        beingEditedModel = null;

        await Form?.FieldValueChanged(Name);

    }

    Task OnFormReset(EventArgs arg)
    {
        beingEditedModel = null;
        return Task.CompletedTask;
    }

    Task EditModel(int index)
    {
        beingEditedModelIndex = index;
        beingEditedModel = Value[index].DeepClone(); //JsonConvert.DeserializeObject<TModel>(JsonConvert.SerializeObject( collection[index]));
        return Task.CompletedTask;
    }



}
