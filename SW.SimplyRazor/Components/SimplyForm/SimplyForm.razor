@typeparam TModel
@implements ISimplyForm
@namespace SW.SimplyRazor
@using FluentValidation

<form id="@Id" @onsubmit="(e) => OnSubmit.InvokeAsync(e)" @onreset="(e) => OnReset.InvokeAsync(e)"></form>
<CascadingValue IsFixed="true" Value="this" Name="Form">
    <CascadingValue Value="(object)Value" Name="Model">
        <CascadingValue IsFixed="true" Value="typeof(TModel)" Name="ModelType">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</CascadingValue>
@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public TModel Value { get; set; }

    [Parameter]
    public EventCallback<TModel> ValueChanged { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnReset { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public AbstractValidator<TModel> Validator { get; set; }

    public string Id => (Name == null) ? $"MainForm{Guid.NewGuid().ToString("N")}" : Name;

    public IDictionary<string, ISimplyField> Fields { get; set; }

    protected override void OnInitialized()
    {
        Fields = new Dictionary<string, ISimplyField>();
    }

    public async Task FieldValueChanged(string name)
    {
        await ValueChanged.InvokeAsync(Value);
    }

    public void AddField(ISimplyField formField)
    {
        if (formField.Name!=null) Fields.Add(formField.Name, formField);
    }

    public void RemoveField(string name)
    {
        if (name!=null) Fields.Remove(name);
    }

    async Task ValidateOnClick(EventArgs args)
    {
        //AbstractValidator<TModel> validator = new EmployeeValidator();

        var result = await Validator.ValidateAsync(Value);

        foreach (var err in result.Errors)
        {
            var fld = Fields[err.PropertyName];
            fld.InvalidFeedback = err.ErrorMessage;

        };
    }






}
