@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ComponentOptions componentOptions

<button disabled="@working" type="button" @onclick="ButtonOnClick" @attributes="UnmatchedAttributes">
    @if (working)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    }
    else
    {
        @Title
    }
</button>

<SimplyConfirm @bind-Visible="confirmVisible" Title="@Title" OnResult="OnConfirmResult" @bind-Working="working">
    @if (ChildContent == null)
    {
        <p>This action might be irriversible. Are you sure you want to perform this action?</p>
    }
    else 
    {
        @ChildContent
    }
</SimplyConfirm>

@code {

    bool working;
    bool confirmVisible;


    [Parameter]
    public string CommandUrl { get; set; }

    [Parameter]
    public object Request { get; set; }

    [Parameter]
    public EventCallback<ApiResult<TResponse>> OnResult { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    [Parameter]
    public ApiMethod Method { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool Confirm { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    async Task OnConfirmResult(bool result)
    {
        if (result) await PerformAction();
    }

    async Task ButtonOnClick(EventArgs args)
    {
        if (Confirm)
        {
            confirmVisible = true;
            return;
        };

        await PerformAction();

    }

    async Task PerformAction()
    {

        try
        {
            working = true;

            var jwt = await authenticationStateProvider.GenerateJwt(componentOptions.ApiTokenKey, componentOptions.ApiTokenIssuer, componentOptions.ApiTokenAudience);

            if (jwt != null)

                apiService.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwt);

            HttpResponseMessage result;

            switch (Method)
            {
                case ApiMethod.Post:
                case ApiMethod.Default:
                    result = await apiService.HttpClient.PostAsync(CommandUrl, Request);
                    break;

                case ApiMethod.Delete:
                    result = await apiService.HttpClient.DeleteAsync(CommandUrl);
                    break;

                default:
                    throw new NotImplementedException();
            }

            if ((int)result.StatusCode >= 200 && (int)result.StatusCode < 300)
            {

                TResponse response;
                if (typeof(TResponse) == typeof(string))

                    response = (TResponse)(object)(await result.Content.ReadAsStringAsync());

                else if (typeof(TResponse) == typeof(NoT))

                    response = default(TResponse);

                else
                    response = await result.Content.ReadAsAsync<TResponse>();

                await OnResult.InvokeAsync(new ApiResult<TResponse>
                {
                    StatusCode = (int)result.StatusCode,
                    Success = true,
                    Response = response
                });
            }
            else if ((int)result.StatusCode >= 400 && (int)result.StatusCode < 500)
            {
                var messages = await result.Content.ReadAsAsync<Dictionary<string, IEnumerable<string>>>();

                foreach (var kvp in messages)
                {
                    if (kvp.Key.StartsWith("Field."))
                    {
                        await notify.Publish(new InvalidFieldNotification
                        {
                            Message = string.Join(", ", kvp.Value),
                        }, kvp.Key.Split('.')[1]);
                    }
                    else
                    {
                        await notify.Publish(new UserMessage
                        {
                            Body = string.Join(",", kvp.Value),
                            Level = AlertLevel.Warning,

                        });
                    }

                }

                await OnResult.InvokeAsync(new ApiResult<TResponse>
                {
                    StatusCode = (int)result.StatusCode,
                });
            }
            else if ((int)result.StatusCode >= 500)
            {
                await notify.Publish(new UserMessage
                {
                    Body = "server error",
                    Level = AlertLevel.Error
                });

                await OnResult.InvokeAsync(new ApiResult<TResponse>
                {
                    StatusCode = (int)result.StatusCode,
                });
            }

            working = false;
        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage
            {
                Body = ex.Message,
                Level = AlertLevel.Error
            });

            await OnResult.InvokeAsync(new ApiResult<TResponse>
            {
                StatusCode = 0,
            });

        }
    }
}
