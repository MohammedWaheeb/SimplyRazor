@namespace SW.SimplyRazor
@implements IFormField
@implements IDisposable


@{
    switch (RenderMode)
    {
        case FieldRole.Input:
            {
                if (fieldState.Visibility == FieldVisibility.Normal || fieldState.Visibility == FieldVisibility.InputVisible)
                {
                    <div class="@((Grouped) ? "col" : "form-group")">

                        @inputComponent

                        @if (fieldState.IsInvalid)
                        {
                            <div class="invalid-feedback">
                                @fieldState.InvalidFeedback
                            </div>
                        }

                        @if (fieldState.Help != null)
                        {
                            <small class="form-text text-muted">@fieldState.Help</small>
                        }
                    </div>
                }
                break;
            }
        case FieldRole.ColumnValue:
            {
                if (fieldState.Visibility == FieldVisibility.Normal || fieldState.Visibility == FieldVisibility.ColumnVisible)
                {

                    <td>
                        @if (ColumnValue == null)
                        {
                            @fieldState.Value

                        }
                        else
                        {
                            @ColumnValue(fieldState)
                        }
                    </td>

                }
                break;
            }

        case FieldRole.ColumnName:
            {
                if (fieldState.Visibility == FieldVisibility.Normal || fieldState.Visibility == FieldVisibility.ColumnVisible)
                {
                    <th scope="col">
                        @if (ColumnHeader == null)
                        {
                            @fieldState.Display

                        }
                        else
                        {
                            @ColumnHeader(fieldState)
                        }
                    </th>
                }
                break;
            }
    }
}

@code {

    [CascadingParameter(Name = "Form")]
    public ISimplyForm Form { get; set; }

    [CascadingParameter(Name = "Model")]
    public object Model { get; set; }

    [CascadingParameter(Name = "RenderMode")]
    public FieldRole RenderMode { get; set; }

    [CascadingParameter(Name = "Grouped")]
    public bool Grouped { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public Type Editor { get; set; }

    [Parameter]
    public string Display { get; set; }

    [Parameter]
    public RenderFragment<FieldState> ColumnHeader { get; set; }

    [Parameter]
    public RenderFragment<FieldState> ColumnValue { get; set; }


    [Parameter]
    public FieldVisibility Visibility { get; set; }

    [Parameter]
    public string Help { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    public string FormId => Form.Id;

    RenderFragment inputComponent;

    RenderFragment CreateInputComponent() => builder =>
    {

        builder.OpenComponent(0, fieldState.Editor);
        builder.AddAttribute(1, "State", fieldState);
        builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<object>(this, OnChange));
        builder.AddMultipleAttributes(3, UnmatchedAttributes);
        builder.CloseComponent();

    };


    FieldState fieldState;

    protected override void OnInitialized()
    {
        fieldState = new FieldState(this, Model);
        if (RenderMode == FieldRole.Input)
        {
            Form.AddField(fieldState);
            inputComponent = CreateInputComponent();
        }
    }

    async Task OnChange(object value)
    {
        if (fieldState.TrySetValue(value)) await Form.FieldValueChanged(fieldState.Name);
    }

    void IDisposable.Dispose()
    {
        if (RenderMode == FieldRole.Input)
        {
            Form.RemoveField(Name);
        }

    }
}
