@typeparam TResponse
@implements ISimplyQuery<TResponse>
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService
@using Newtonsoft.Json

@if (CurrentResult != null )
{
    if (Result != null)
    {
        @Result(this)
    }
}

else if (Loading != null)
{
    @Loading
}

@code {

    [Parameter]
    public string QueryUrl { get; set; }

    [Parameter]
    public EventCallback<ApiResult<TResponse>> OnResult { get; set; }

    [Parameter]
    public bool Working { get; set; }

    [Parameter]
    public EventCallback<bool> WorkingChanged { get; set; }

    [Parameter]
    public RenderFragment<ISimplyQuery<TResponse>> Result { get; set; }

    [Parameter]
    public RenderFragment Loading { get; set; }

    public TResponse CurrentResult { get; set; }

    async public override Task SetParametersAsync(ParameterView parameters)
    {
        var queryUrl = parameters.GetValueOrDefault<string>("QueryUrl");
        var oldQueryUrl = QueryUrl;
        await base.SetParametersAsync(parameters);

        if (string.IsNullOrEmpty(queryUrl) || queryUrl == oldQueryUrl) return;

        await RunQuery();
    }

    async public Task Refresh()
    {
        CurrentResult = default;
        await RunQuery();
    }

    async Task RunQuery()
    {
        await WorkingChanged.InvokeAsync(true);

        var result = await apiService.GetAsync<TResponse>(QueryUrl);

        if (result.StatusCode == 401)
        {
            await notify.Publish(new UserMessage
            {
                Body = $"Error ({result.StatusCode}): Unauthorized.",
                Level = AlertLevel.Warning
            });
        }

        else if (result.StatusCode == 400)
        {
            var messages = JsonConvert.DeserializeObject<Dictionary<string, IEnumerable<string>>>(result.Body);

            await notify.Publish(new UserMessage
            {
                Body = $"Error ({result.StatusCode}): {messages.Values.First().First()}",
                Level = AlertLevel.Error
            });
        }

        else if (result.StatusCode == 404)
        {
            await notify.Publish(new UserMessage
            {
                Body = $"Error ({result.StatusCode}): Not found.",
                Level = AlertLevel.Error
            });
        }

        else if (result.StatusCode == 0 || result.StatusCode >= 300)
        {
            await notify.Publish(new UserMessage
            {
                Body = $"Error ({result.StatusCode}): {(result.Body ?? "...")}",
                Level = AlertLevel.Error
            });
        }

        await OnResult.InvokeAsync(result);
        await WorkingChanged.InvokeAsync(false);

        if (result.Success)
            CurrentResult = result.Response;

        StateHasChanged();
    }
}
