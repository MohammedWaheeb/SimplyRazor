@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ComponentOptions componentOptions

@code {

    [Parameter]
    public string QueryUrl { get; set; }

    //[Parameter]
    //public TResponse Value { get; set; }

    //[Parameter]
    //public EventCallback<TResponse> ValueChanged { get; set; }

    //[Parameter]
    //public bool Ready { get; set; }

    [Parameter]
    public EventCallback<ApiResult<TResponse>> OnResult { get; set; }

    [Parameter]
    public bool Working { get; set; }

    [Parameter]
    public EventCallback<bool> WorkingChanged { get; set; }

    //[Parameter]
    //public EventCallback<object> OnSuccess { get; set; }

    //[Parameter]
    //public EventCallback<object> OnFailure { get; set; }


    async public override Task SetParametersAsync(ParameterView parameters)
    {

        var queryUrl = parameters.GetValueOrDefault<string>("QueryUrl");
        var oldQueryUrl = QueryUrl;
        await base.SetParametersAsync(parameters);

        if (string.IsNullOrEmpty(queryUrl) || queryUrl == oldQueryUrl) return;

        await WorkingChanged.InvokeAsync(true);
        await Task.Delay(TimeSpan.FromMilliseconds(100));

        try
        {
            var jwt = await authenticationStateProvider.GenerateJwt(componentOptions.ApiTokenKey, componentOptions.ApiTokenIssuer, componentOptions.ApiTokenAudience);

            if (jwt != null)

                apiService.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwt);

            var result = await apiService.HttpClient.GetAsync(queryUrl);

            if ((int)result.StatusCode >= 200 && (int)result.StatusCode < 300)
            {
                TResponse response;
                if (typeof(TResponse) == typeof(string))

                    response = (TResponse)(object)(await result.Content.ReadAsStringAsync());

                else
                    response = await result.Content.ReadAsAsync<TResponse>();

                await OnResult.InvokeAsync(new ApiResult<TResponse>
                {
                    Response = response,
                    Success = true,
                    StatusCode = (int)result.StatusCode

                });
            }
            else if ((int)result.StatusCode >= 400 && (int)result.StatusCode < 500)
            {

                var messages = await result.Content.ReadAsAsync<Dictionary<string, IEnumerable<string>>>();

                await notify.Publish(new UserMessage { Body = "error", Level = AttentionLevel.Warning });
                await OnResult.InvokeAsync(new ApiResult<TResponse>
                {
                    Success = false,
                    StatusCode = (int)result.StatusCode

                });
            }
            else if ((int)result.StatusCode >= 500)
            {
                await notify.Publish(new UserMessage { Body = "server error", Level = AttentionLevel.Error });
                await OnResult.InvokeAsync(new ApiResult<TResponse>
                {
                    Success = false,
                    StatusCode = (int)result.StatusCode

                });
            }

        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Error });
            await OnResult.InvokeAsync(new ApiResult<TResponse>
            {
                Success = false,
                StatusCode = 0

            });
        }
        finally
        {
            await WorkingChanged.InvokeAsync(false);
        }
    }

}
