@typeparam TKey
@implements ISimplyTypeahead
@namespace SW.SimplyRazor
@using System.Text.Json
@using SW.ModelApi

@inject IJSRuntime JSRuntime
@inject MapiClientFactory mapiClientFactory



<input @ref="inputRef" value="@inputValue" type="text" class="form-control" />



<p>@inputValue</p>

@code {

    ElementReference inputRef;
    object inputValue;


    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public TKey Value { get; set; }

    [Parameter]
    public EventCallback<TKey> ValueChanged { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Value == null)
        {
            inputValue = null;
            return;
        }

        inputValue = await mapiClientFactory.GetClient(Lookup).LookupValue(Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var wrapper = new SimplyTypeaheadInterop(this);
            await wrapper.InitAutoComplete(JSRuntime, inputRef);
        }
    }

    public async Task SetSelectedItem(KeyValuePair<JsonElement, string> keyValue)
    {


        if (keyValue.Key.ValueKind == JsonValueKind.String)
        {
            string keyStr = null;
            keyStr = keyValue.Key.ToString();
            await ValueChanged.InvokeAsync((TKey)(object)keyStr);

        }
        else if (keyValue.Key.ValueKind == JsonValueKind.Number)
        {
            if (keyValue.Key.TryGetInt32(out var keyInt))
            {
                await ValueChanged.InvokeAsync((TKey)(object)keyInt);
            }
            throw new NotImplementedException();
        }
        else
        {
            throw new NotImplementedException();
        }


    }


}
