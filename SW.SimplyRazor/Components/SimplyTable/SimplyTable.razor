@typeparam TModel
@namespace SW.SimplyRazor

<SimplyTableNonGeneric Value="Value" 
                       Type="typeof(TModel)" 
                       Text="@Text"
                       Form="Form" 
                       Columns="Columns" 
                       OnItem="TableOnItem"
                       ValueChanged="TableValueChanged"/>

@code {

    [Parameter]
    public ICollection<TModel> Value { get; set; }

    [Parameter]
    public EventCallback<ICollection<TModel>> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public RenderFragment Form { get; set; }

    TModel newModel;
    TModel originalModel;

    async Task TableOnItem(TableItem<object> tableItem)
    {
        await OnItem.InvokeAsync(new TableItem<TModel>
        {
            Flag = tableItem.Flag,
            Item = (TModel)tableItem.Item
        });
    }

    async Task TableValueChanged(object obj)
    {
        await ValueChanged.InvokeAsync((ICollection<TModel>)obj);
    }



}
