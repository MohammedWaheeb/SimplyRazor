@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ComponentOptions componentOptions



<button disabled="@working" type="button" @onclick="ButtonOnClick" @attributes="UnmatchedAttributes">
    @if (working)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    }
    else
    {
        @Text
    }
</button>

@code {

    bool working;

    [Parameter]
    public string CommandUrl { get; set; }

    [Parameter]
    public object Request { get; set; }

    [Parameter]
    public EventCallback<object> OnSuccess { get; set; }

    [Parameter]
    public EventCallback<object> OnFailure { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    [Parameter]
    public string Text { get; set; }

    async Task ButtonOnClick(EventArgs args)
    {
        try
        {
            working = true;

            var jwt = await authenticationStateProvider.GenerateJwt(componentOptions.ApiTokenKey, componentOptions.ApiTokenIssuer, componentOptions.ApiTokenAudience);

            if (jwt != null)

                apiService.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwt);

            var result = await apiService.HttpClient.PostAsync(CommandUrl, Request);

            if ((int)result.StatusCode >= 200 && (int)result.StatusCode < 300)
            {
                await OnSuccess.InvokeAsync(null);
            }
            else if ((int)result.StatusCode >= 400 && (int)result.StatusCode < 500)
            {
                var messages = await result.Content.ReadAsAsync<Dictionary<string, IEnumerable<string>>>();

                foreach (var kvp in messages)
                {
                    if (kvp.Key.StartsWith("Field."))
                    {
                        await notify.Publish(new InvalidFieldNotification
                        {
                            Message = string.Join(", ", kvp.Value),
                        }, kvp.Key.Split('.')[1]);
                    }
                    else
                    {
                        await notify.Publish(new UserMessage
                        {
                            Body = string.Join(", ", kvp.Value),
                            Level = AttentionLevel.Warning,

                        });
                    }

                }

                await OnFailure.InvokeAsync(null);
            }
            else if ((int)result.StatusCode >= 500)
            {
                await notify.Publish(new UserMessage
                {
                    Body = "server error",
                    Level = AttentionLevel.Error
                });

                await OnFailure.InvokeAsync(null);
            }

            working = false;
        }
        catch (Exception ex)
        {
            await OnFailure.InvokeAsync(null);
            await notify.Publish(new UserMessage
            {
                Body = ex.Message,
                Level = AttentionLevel.Error
            });
        }
    }
}
