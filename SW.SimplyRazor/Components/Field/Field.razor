@namespace SW.SimplyRazor
@implements IField
@implements IDisposable
@using SW.PrimitiveTypes
@using System.Reflection
@using Humanizer
@using System.Collections

@switch (RenderMode)
{
    case FieldRole.Input:

        if (editorFragment != null)
        {
            <SimplyNotify Notification="InvalidFieldNotification" OnReceived="OnServerFeedback" Tag="@Name" />

            @editorFragment

            @if (invalidFeedback != null)
            {
                <div class="invalid-feedback">
                    @invalidFeedback
                </div>
            }
            @if (serverFeedback != null)
            {
                <div class="invalid-feedback">
                    @serverFeedback
                </div>
            }

            @if (Help != null)
            {
                <small class="form-text text-muted">@Help</small>
            }

        }
        break;

    case FieldRole.ColumnValue:

        <td>
            @if (ColumnValue == null)
            {
                @if (Lookup != null && !string.IsNullOrWhiteSpace(Value.ToString()))
                {
                    <SimplyQuery QueryUrl="@($"{Lookup}/{Value}?lookup=true")" OnResult="OnQueryResult" TResponse="string" />
                    <SimplyReady @bind-Ready="lookupReady">
                        @lookupValue
                    </SimplyReady>
                }
                else

                    @GetFormattedValue()
            }
            else
            {
                @ColumnValue(this)
            }
        </td>

        break;

    case FieldRole.ColumnName:

        <th class="text-secondary pr-2" scope="col" style="font-weight: unset" >
            @if (ColumnHeader == null)
            {
                @Text
            }
            else
            {
                @ColumnHeader(this)
            }
        </th>

        break;
}

@code {

    [CascadingParameter(Name = "Search")]
    public ISimplySearch Search { get; set; }

    [CascadingParameter(Name = "ChangeMaster")]
    public IChangeMaster ChangeMaster { get; set; }

    [CascadingParameter(Name = "Model")]
    public object Model { get; set; }

    [CascadingParameter(Name = "ModelType")]
    public Type ModelType { get; set; }

    [CascadingParameter(Name = "RenderMode")]
    public FieldRole RenderMode { get; set; }

    [CascadingParameter(Name = "FieldAction")]
    public IComponentAction Action { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public object Default { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public RenderFragment<IField> ColumnHeader { get; set; }

    [Parameter]
    public RenderFragment<IField> ColumnValue { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public string Help { get; set; }

    [Parameter]
    public InputType InputType { get; set; }

    [Parameter]
    public int? TypeAhead { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string Format { get; set; }

    [Parameter]
    public int Rows { get; set; } = 1;

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    public PropertyInfo PropertyInfo { get; private set; }

    string id;
    public string Id => id;

    Type editor;
    string text = null;
    SimplySearchFilterSetup filterSetup;

    [Parameter]
    public string Text
    {
        get => text ?? Name?.Humanize();
        set => text = value;
    }

    string invalidFeedback;

    public bool IsInvalid => serverFeedback != null || invalidFeedback != null;

    public object Value
    {
        get
        {
            object obj = Model;

            for (int i = 0; i < nameArray.Length - 1; i++)

                if (obj != null) obj = obj.GetType().GetProperty(nameArray[i]).GetValue(obj);

            if (obj != null) return PropertyInfo.GetValue(obj);

            return null;
        }
    }

    RenderFragment editorFragment;

    RenderFragment CreateEditor() => builder =>
    {
        builder.OpenComponent(0, editor);
        builder.AddAttribute(1, "State", this);
        builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<object>(this, OnChange));
        builder.AddMultipleAttributes(3, UnmatchedAttributes);
        builder.CloseComponent();
    };

    string[] nameArray;
    bool lookupReady;
    string lookupValue;


    async override protected Task OnInitializedAsync()
    {

        id = $"f_{Name}_{Guid.NewGuid().ToString("N")}";

        if (Name is null) return;

        nameArray = Name.Split('.');

        PropertyInfo = (ModelType ?? Model.GetType()).GetProperty(nameArray[0]);

        for (int i = 1; i < nameArray.Length; i++)

            PropertyInfo = PropertyInfo.PropertyType.GetProperty(nameArray[i]);

        if (PropertyInfo == null) throw new ArgumentException("Field not found.", Name);

        switch (RenderMode)
        {
            case FieldRole.Filter:

                string filterTypeString = SearchyDataType.TypeStringFor(PropertyInfo.PropertyType);

                filterSetup = new SimplySearchFilterSetup
                {
                    Field = Name,
                    Text = Text,
                    Type = filterTypeString,
                    Rules = SearchyDataType.RulesFor(filterTypeString),
                    Required = Required,
                    Lookup = Lookup,
                    TypeAhead = TypeAhead

                };

                await Search.AddFilterSetup(filterSetup);

                break;

            case FieldRole.Input:

                if (PropertyInfo.GetSetMethod() ==null) throw new ArgumentException("Field does not have public setter.", Name);

                var nakedType = Nullable.GetUnderlyingType(PropertyInfo.PropertyType) ?? PropertyInfo.PropertyType;

                if (PropertyInfo.PropertyType == typeof(bool))
                {
                    editor = typeof(EditorForBoolean);
                }
                else if (PropertyInfo.PropertyType == typeof(RemoteBlob))
                {
                    editor = typeof(EditorForUpload);
                }
                else if (nakedType.IsEnum)
                {
                    editor = typeof(EditorForEnum);
                }
                else if (typeof(IDictionary<string, string>).IsAssignableFrom(PropertyInfo.PropertyType))
                {
                    editor = typeof(EditorForDictionary);
                }
                else if (PropertyInfo.PropertyType.IsArray && PropertyInfo.PropertyType.GetElementType() == typeof(string))
                {
                    editor = typeof(EditorForListAsTextArea);
                }
                else if (PropertyInfo.PropertyType.IsArray && PropertyInfo.PropertyType.GetElementType() == typeof(DateTime))
                {
                    editor = typeof(EditorForDateRange);
                }
                else if (PropertyInfo.PropertyType.IsArray)
                {
                    throw new ArgumentException("Only 'string' and 'datetime' arrays supported.", Name);
                }
                else if (PropertyInfo.PropertyType.IsGenericType && typeof(IEnumerable).IsAssignableFrom(PropertyInfo.PropertyType))
                {
                    if (InputType == InputType.Multiline && PropertyInfo.PropertyType.GetGenericArguments()[0] == typeof(string))
                        editor = typeof(EditorForListAsTextArea);
                    else
                        editor = typeof(EditorForList);
                }
                else if (nakedType == typeof(DateTime) && InputType == InputType.Calendar)
                {
                    editor = typeof(EditorForDateAsCalendar);
                }
                else if (Lookup != null)
                {
                    if (TypeAhead == null)

                        editor = typeof(EditorForTextAsSelect);

                    else

                        editor = typeof(EditorForTypeAhead);

                }
                else
                {
                    editor = typeof(EditorForText);
                }


                if (Value == null && Default != null)
                {
                    await OnChange(Default);
                }

                editorFragment = CreateEditor();
                break;
        }


    }

    async Task OnChange(object value)
    {
        if (value is InvalidFieldValue)
        {
            invalidFeedback = ((InvalidFieldValue)value).Message;
        }
        else if (TrySetValue(value))
        {
            serverFeedback = null;
            await ValueChanged.InvokeAsync(value);
            await ChangeMaster?.FieldValueChanged(Name);
        }
    }

    bool TrySetValue(object value)
    {
        object obj = Model;

        for (int i = 0; i < nameArray.Length - 1; i++)
        {
            var targetProp = obj.GetType().GetProperty(nameArray[i]);
            var nextType = targetProp.PropertyType;
            var nextObj = targetProp.GetValue(obj);
            if (nextObj == null)
            {
                nextObj = Activator.CreateInstance(nextType);
                targetProp.SetValue(obj, nextObj);
            }

            obj = nextObj;
        }

        try
        {
            var typedValue = Object.ConvertValueToType(value, PropertyInfo.PropertyType);
            PropertyInfo.SetValue(obj, typedValue);
            invalidFeedback = null;

            return true;
        }
        catch (Exception)
        {
            invalidFeedback = $"{value} is not {PropertyInfo.PropertyType.Name}";
            return false;
        }
    }

    void OnQueryResult(ApiResult<string> apiResult)
    {
        lookupValue = string.Empty;
        if (apiResult.Success) lookupValue = apiResult.Response;
        lookupReady = true;
    }

    System.Timers.Timer countdown;
    string serverFeedback;

    void OnServerFeedback(InvalidFieldNotification notification)
    {
        serverFeedback = notification.Message;
        StateHasChanged();

        countdown = new System.Timers.Timer(TimeSpan.FromSeconds(5).TotalMilliseconds);
        countdown.Elapsed += async (s, e) => await OnDue();
        countdown.AutoReset = false;
        countdown.Start();
    }

    async Task OnDue()
    {
        serverFeedback = null;

        await InvokeAsync(() => StateHasChanged());
    }

    public object GetFormattedValue()
    {
        if (Value == null) return null;

        if (!string.IsNullOrEmpty(Format))
        {
            return ((dynamic)Value).ToString(Format);
        }
        else
            return Value;
    }

    void IDisposable.Dispose()
    {
        countdown?.Dispose();
        Search?.RemoveFilterSetup(filterSetup);
    }
}
