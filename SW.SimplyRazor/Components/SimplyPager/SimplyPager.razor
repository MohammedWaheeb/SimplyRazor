@namespace SW.SimplyRazor
@inject NotifyService notify

<SimplyNotify Notification="DatalistReady" OnReceived="HandleDatalistReady" />


@if (Count > 0)
{
    <ul class="pagination">
        <li class="page-item ">
            <SimplyButton Value="0"
                          OnClick="e=> ChangePage(e)"
                          class="page-link"
                          disabled="@(CurrentPage <= 0 ? true : false)">
                <Text>First</Text>
            </SimplyButton>
        </li>
        <li class="page-item ">
            <SimplyButton Value="CurrentPage-1"
                          OnClick="e=> ChangePage(e)"
                          class="page-link"
                          disabled="@(CurrentPage <= 0 ? true : false)">
                <Text>Previous</Text>
            </SimplyButton>
        </li>
        <li class="page-item ">
            <SimplyButton Value="CurrentPage+1"
                          OnClick="e=> ChangePage(e)"
                          class="page-link"
                          disabled="@(Count == PageSize || CurrentPage < totalPages ? null : "disbaled")">
                <Text>Next</Text>
            </SimplyButton>
        </li>
        @if (totalPages > 0)
        {
            <li class="page-item ">
                <SimplyButton Value="totalPages-1"
                              OnClick="e=> ChangePage(e)"
                              class="page-link">
                    <Text>Last</Text>
                </SimplyButton>
            </li>
        }

    </ul>
}


@*
    disabled="@(CurrentPage < totalPages ? null : "disbaled")"*@
@code {

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> OnCurrentPageChanged { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int Count { get; set; }

    [Parameter]
    public int TotalCount { get; set; }

    int totalPages => (PageSize == 0) ? 0 : (int)Math.Ceiling(decimal.Divide(TotalCount, PageSize));

    async Task ChangePage(dynamic page)
    {
        await notify.Publish(new PageIndexRequested { Index = page });
    }

    async Task HandleDatalistReady(DatalistReady data)
    {
        CurrentPage = data.PageIndex;
        TotalCount = data.TotalCount;
        Count = data.Count;
        PageSize = data.PageSize;
        await OnCurrentPageChanged.InvokeAsync(CurrentPage);
    }

}
