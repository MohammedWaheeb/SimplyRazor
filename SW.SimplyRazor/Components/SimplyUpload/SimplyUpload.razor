@namespace SW.SimplyRazor
@inject IJSRuntime JSRuntime

<div class="input-group mb-3">
    <div class="custom-file">
        <input class="custom-file-input" @ref="inputRef" @onchange="InputOnChange" type="file" accept="image/*" />
        <label class="custom-file-label" for="customFile">Select</label>
    </div>
    <div class="input-group-append">
        <button disabled="@(!saveButtonState)" @onclick="SaveOnClick" class="btn btn-outline-secondary" type="button">
            @if (saving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                @:Saving...
            }
            else if (saved)
            {
                @:Saved
            }
            else
            {
                @:Save
            }
        </button>
    </div>
</div>





@code {

    ElementReference inputRef;
    string value;



    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>
    UnmatchedParameters
    { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, string>> ValueChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //styling
            await JSRuntime.InvokeVoidAsync("simplyUploadInterop.initBsCustomFileInput");
        }
    }

    bool saveButtonState;
    bool saving;
    bool saved;

    async Task SaveOnClick(EventArgs args)
    {
        saving = true;
        saveButtonState = false;

        try
        {
            var x = await JSRuntime.InvokeAsync<string>("simplyUploadInterop.saveFile", inputRef);
        }
        catch (Exception)
        {
            var x = 1;
        }
        finally
        {
            saving = false;
            saved = true;
            saveButtonState = false;
        }
    }

    Task InputOnChange(ChangeEventArgs args)
    {
        saved = false;
        saveButtonState = true;
        return Task.CompletedTask;
    }
}
