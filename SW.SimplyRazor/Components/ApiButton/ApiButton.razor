@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService

<BusyButton OnClick="OnClick" UnmatchedAttributes="UnmatchedAttributes">
    @ChildContent
</BusyButton>

@code {

    [Parameter]
    public string Url { get; set; }

    [Parameter]
    public object Request { get; set; }

    [Parameter]
    public EventCallback<TResponse> OnSuccess { get; set; }

    [Parameter]
    public EventCallback OnFailure { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    [Parameter]
    public ApiMethod Method { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    async Task OnClick(object args)
    {
        ApiResult<TResponse> result;

        switch (Method)
        {
            case ApiMethod.Post:
            case ApiMethod.Default:
                result = await apiService.PostAsync<TResponse>(Url, Request);
                break;

            case ApiMethod.Delete:
                var result1 = await apiService.DeleteAsync(Url);

                result = new ApiResult<TResponse>
                {
                    StatusCode = result1.StatusCode,
                    Success = result1.Success
                };

                break;

            default:
                throw new NotImplementedException();
        }

        await notify.NotifyOnApiResult(result);

        if (result.Success) await OnSuccess.InvokeAsync(result.Response);
        else await OnFailure.InvokeAsync(null);

    }
}
