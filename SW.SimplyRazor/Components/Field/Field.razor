@namespace SW.SimplyRazor
@implements IField
@implements IDisposable
@inject ApiService apiClient
@using SW.PrimitiveTypes
@using System.Reflection
@using Humanizer

@switch (RenderMode)
{
    case FieldRole.Input:

        if (editorFragment != null)
        {
            <SimplyNotify Notification="InvalidFieldNotification" OnReceived="OnServerFeedback" Tag="@Name" />

            @editorFragment

            @if (invalidFeedback != null)
            {
                <div class="invalid-feedback">
                    @invalidFeedback
                </div>
            }
            @if (serverFeedback != null)
            {
                <div class="invalid-feedback">
                    @serverFeedback
                </div>
            }

            @if (Help != null)
            {
                <small class="form-text text-muted">@Help</small>
            }

        }
        break;

    case FieldRole.ColumnValue:

        <td>
            @if (ColumnValue == null)
            {
                @if (Lookup != null && !string.IsNullOrWhiteSpace(Value.ToString()))
                {
                    <SimplyQuery QueryUrl="@($"{Lookup}/{Value}?lookup=true")" @bind-Value="lookupValue" @bind-Ready="lookupReady" />
                    <SimplyReady @bind-Ready="lookupReady">
                        @lookupValue
                    </SimplyReady>
                }
                else

                    @Value
            }
            else
            {
                @ColumnValue(this)
            }
        </td>

        break;

    case FieldRole.ColumnName:

        <th scope="col">
            @if (ColumnHeader == null)
            {
                @Text
            }
            else
            {
                @ColumnHeader(this)
            }
        </th>

        break;
}

@code {

    [CascadingParameter(Name = "Form")]
    public ISimplyForm Form { get; set; }

    [CascadingParameter(Name = "Model")]
    public object Model { get; set; }

    [CascadingParameter(Name = "RenderMode")]
    public FieldRole RenderMode { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public RenderFragment<IField> ColumnHeader { get; set; }

    [Parameter]
    public RenderFragment<IField> ColumnValue { get; set; }

    [Parameter]
    public string Help { get; set; }

    [Parameter]
    public InputType InputType { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    public PropertyInfo PropertyInfo { get; private set; }

    string id;
    public string Id => id;

    Type editor;
    string text = null;

    [Parameter]
    public string Text
    {
        get => text == null ? Name?.Humanize() : text;
        set => text = value;
    }

    string invalidFeedback;

    public bool IsInvalid => serverFeedback != null || invalidFeedback != null;


    public object Value
    {
        get
        {
            object obj = Model;

            for (int i = 0; i < nameArray.Length - 1; i++)

                if (obj != null) obj = obj.GetType().GetProperty(nameArray[i]).GetValue(obj);

            if (obj != null) return PropertyInfo.GetValue(obj);

            return null;
        }
    }

    RenderFragment editorFragment;

    RenderFragment CreateEditor() => builder =>
    {
        builder.OpenComponent(0, editor);
        builder.AddAttribute(1, "State", this);
        builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<object>(this, OnChange));
        builder.AddMultipleAttributes(3, UnmatchedAttributes);
        builder.CloseComponent();

    };

    string[] nameArray;
    bool lookupReady;
    string lookupValue;

    protected override void OnInitialized()
    {

        id = Name == null
            ? $"field{Guid.NewGuid().ToString("N")}"
            : $"{Name}".Replace(".", "_").ToLower();

        if (Name is null) return;

        nameArray = Name.Split('.');

        PropertyInfo = Model.GetType().GetProperty(nameArray[0]);

        if (RenderMode != FieldRole.Input) return;

        for (int i = 1; i < nameArray.Length; i++)

            PropertyInfo = PropertyInfo.PropertyType.GetProperty(nameArray[i]);

        if (PropertyInfo.PropertyType == typeof(bool))
        {
            editor = typeof(EditorForBoolean);
        }
        else if (PropertyInfo.PropertyType == typeof(RemoteBlob))
        {
            editor = typeof(EditorForUpload);
        }
        else
        {
            editor = (Lookup == null) ? typeof(EditorForText) : typeof(EditorForTextAsSelect);
        }

        if (editor != null) editorFragment = CreateEditor();
    }

    async Task OnChange(object value)
    {
        if (TrySetValue(value))
        {
            serverFeedback = null;
            await Form?.FieldValueChanged(Name);
        }

    }

    bool TrySetValue(object value)
    {
        object obj = Model;

        for (int i = 0; i < nameArray.Length - 1; i++)
        {
            var targetProp = obj.GetType().GetProperty(nameArray[i]);
            var nextType = targetProp.PropertyType;
            var nextObj = targetProp.GetValue(obj);
            if (nextObj == null)
            {
                nextObj = Activator.CreateInstance(nextType);
                targetProp.SetValue(obj, nextObj);
            }

            obj = nextObj;
        }

        try
        {
            var typedValue = Object.ConvertValueToType(value, PropertyInfo.PropertyType);
            PropertyInfo.SetValue(obj, typedValue);
            invalidFeedback = null;

            return true;
        }
        catch (Exception ex)
        {
            invalidFeedback = $"{value} is not {PropertyInfo.PropertyType.Name}";
            return false;
        }
    }

    System.Timers.Timer countdown;
    string serverFeedback;

    void OnServerFeedback(InvalidFieldNotification notification)
    {

        serverFeedback = notification.Message;
        StateHasChanged();

        countdown = new System.Timers.Timer(TimeSpan.FromSeconds(5).TotalMilliseconds);
        countdown.Elapsed += async (s, e) => await OnDue();
        countdown.AutoReset = false;
        countdown.Start();
    }

    async Task OnDue()
    {
        serverFeedback = null;

        await InvokeAsync(() => StateHasChanged());
    }

    void IDisposable.Dispose()
    {
        countdown?.Dispose();
    }
}
