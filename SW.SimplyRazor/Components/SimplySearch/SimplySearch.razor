@typeparam TModel
@namespace SW.SimplyRazor
@implements ISimplySearch
@implements IFieldAction
@inject NotifyService notify

<CascadingValue IsFixed="true" Value="this" Name="Search">
    <CascadingValue IsFixed="true" Value="typeof(TModel)" Name="ModelType">
        <CascadingValue IsFixed="true" Value="FieldRole.Filter" Name="RenderMode">
            @Filters
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

<SimplyQuery QueryUrl="@FilterUrl" @bind-Working="filterQueryBusy" OnResult="OnFilterQueryResult" TResponse="IEnumerable<SearchyFilterSetup>"></SimplyQuery>
<SimplyQuery QueryUrl="@query" @bind-Working="searchQueryBusy" OnResult="OnSearchQueryResult" TResponse="SearchyResponse<TModel>"></SimplyQuery>

@if (filterSetup.Any(filter => !filter.Required))
{
    <div class="row align-items-center mb-2">
        <label class="col-2 col-form-label" for="filterSelect" >Search filter</label>
        <div class="input-group col-7">
            <SimplySelect @bind-Value="filterValue"
                          EmptyText="Select filter"
                          Items="@(filterSetup.Select(e=>e.Text).ToList())"
                          class="form-control" />

            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="FilterAddOnClick">Add</button>
            </div>
        </div>

    </div>
}

@foreach (var filter in filters)
{
    <div class="row mb-2" @key="filter">
        <label class="col-2 col-form-label">@filter.Text</label>
        <div class="input-group col-7">
            <SimplySelect Value="filter.Rule"
                          ValueChanged="((value) => OnRuleChange(filter, value))"
                          Items="filter.Rules"
                          TKey="SearchyRule"
                          class="input-group-prepend" />

            @switch (filter.Type)
            {
                case SearchyDataType.Number:

                    <input @bind="filter.ValueDecimal" type="number" class="form-control" />
                    break;

                case SearchyDataType.Date:

                    if (filter.DateMode == DateMode.Single)
                    {
                        <SimplyDate Value="filter.ValueDateTime" ValueChanged="((value) => OnFilterValueChange(filter, value))" class="form-control"></SimplyDate>
                    }
                    else
                    {
                        <SimplyDate Value="filter.ValueDateTimeArray" ValueChanged="((value) => OnFilterValueChange(filter, value))" Mode="DateMode.Range" class="form-control"></SimplyDate>
                    }

                    break;

                default:

                    <input @bind="filter.ValueString" type="text" class="form-control" />
                    break;
            }
            @if (!filter.Required)
            {
                <div class="input-group-append">
                    <button @onclick="@(e => RemoveFilter(filter))" class="btn btn-outline-secondary" type="button"><span class="oi oi-x" /></button>
                </div>
            }

        </div>
    </div>

}

<div class="row align-items-center mb-3">
    <div class="col-auto">
        <button type="button" @onclick="() => Search(0)" class="btn btn-primary" style="width: 90px;">
            @if (filterQueryBusy || searchQueryBusy)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            else
            {
                @:Search
            }
        </button>
        @if (Commands != null)
        {
            @Commands(this)
        }
    </div>

</div>

@if (result != null && result.Result.Count() > 0)
{
    <div class="mb-3">
        <SimplyGridNonGeneric Data="result.Result" RowClicked="GridRowClicked" Height="@Height" Width="@Width">
            @Columns
        </SimplyGridNonGeneric>
    </div>
    <SimplyPager TotalCount="result.TotalCount" Count="result.Result.Count()" Page="page" PageSize="PageSize" PageChanged="page => Search(page)"></SimplyPager>
}

@code{

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public string FilterUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public RenderFragment<IFieldAction> Commands { get; set; }

    [Parameter]
    public EventCallback<TModel> RowClicked { get; set; }

    int filterValue;
    List<FilterModel> filters = new List<FilterModel>();
    List<ISearchyFilterSetup> filterSetup = new List<ISearchyFilterSetup>();
    bool searchQueryBusy;
    bool filterQueryBusy;
    int page;
    SearchyResponse<TModel> result;
    string query;

    void OnRuleChange(FilterModel filter, SearchyRule rule)
    {
        filter.Rule = rule;
        if (filter.Rule == SearchyRule.Range)
        {
            filter.DateMode = DateMode.Range;
            filter.ValueDateTime = null;
        }
        else
        {
            filter.DateMode = DateMode.Single;
            filter.ValueDateTimeArray = null;
        }

    }

    void OnFilterValueChange(FilterModel filter, object value)
    {
        if (filter.Rule == SearchyRule.Range)
            filter.ValueDateTimeArray = (DateTime[])value;
        else
            filter.ValueDateTime = (DateTime)value;

    }

    Task FilterAddOnClick(object e)
    {
        if (filterValue > 0)
        {
            filters.Add(new FilterModel(filterSetup[filterValue - 1]));
            filterValue = 0;
        }
        return Task.CompletedTask;
    }

    async Task RemoveFilter(FilterModel filter)
    {
        if (filter.Required)
            await notify.Publish(new UserMessage { Body = "This filter is required for search.", Level = AlertLevel.Warning });
        else
            filters.Remove(filter);
    }

    void Search(int page)
    {
        var filledFilters = filters.Where(filter => filter.ValueDateTime != null ||
                                            filter.ValueDateTimeArray != null ||
                                            filter.ValueDecimal != null ||
                                            filter.ValueDecimalArray != null ||
                                            filter.ValueString != null ||
                                            filter.ValueStringArray != null);

        var searchRequest = new SearchyRequest(new SearchyCondition(filledFilters))
        {
            PageSize = PageSize,
            PageIndex = page
        };

        query = $"{SearchUrl}?{searchRequest.ToString()}";
        this.page = page;
    }

    async public Task AddFilterSetup(ISearchyFilterSetup filter)
    {
        filterSetup.Add(filter);
        if (filter.Default || filter.Required) filters.Add(new FilterModel(filter));
        await InvokeAsync(() => StateHasChanged());
    }

    async Task OnFilterQueryResult(ApiResult<IEnumerable<SearchyFilterSetup>> apiResult)
    {
        if (apiResult.Success)
        {
            foreach (var fc in apiResult.Response)

                await AddFilterSetup(fc);
        }
    }

    public void RemoveFilterSetup(ISearchyFilterSetup filter)
    {
        filterSetup.Remove(filter);
    }

    Task GridRowClicked(object model)
    {
        return RowClicked.InvokeAsync((TModel)model);
    }

    async Task OnSearchQueryResult(ApiResult<SearchyResponse<TModel>> apiResult)
    {
        if (apiResult.Success)
        {
            if (apiResult.Response.Result.Count() == 0)
            {
                await notify.Publish(new UserMessage { Body = "Search returned no results.", Level = AlertLevel.Info });
            }
            result = apiResult.Response;
        }
        query = null;
    }

    async public Task Invoke(string actionName, object actionValue)
    {
        switch (actionName.ToLower())
        {
            case "exporttoexcel":

                //Add();
                break;



            default:

                break;
        }
    }

}
