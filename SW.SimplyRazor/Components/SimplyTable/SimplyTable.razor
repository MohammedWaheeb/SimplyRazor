@typeparam TModel
@implements ISimplyTable
@namespace SW.SimplyRazor

<div>
    <CascadingValue Value="this" Name="Table">
        @Header
    </CascadingValue>
</div>

@if (Value?.Count > 0)
{
    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <CascadingValue IsFixed="true" Value="FieldRole.ColumnName" Name="RenderMode">
                    <CascadingValue Value="Value.First()" Name="Model">
                        @Columns
                    </CascadingValue>
                </CascadingValue>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < Value.Count; i++)
            {
                var itemIndex = i;
                <tr @key="Value[itemIndex]">
                    <CascadingValue IsFixed="true" Value="FieldRole.ColumnValue" Name="RenderMode">
                        <CascadingValue Value="Value[itemIndex]" Name="Model">
                            @Columns
                        </CascadingValue>
                    </CascadingValue>

                </tr>
            }
        </tbody>
    </table>
}

@if (beingEditedModel != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog modal-dialog-scrollable" role="document" style="display:block">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"></h5>
                </div>
                <div class="modal-body">
                    <SimplyForm Value="beingEditedModel">
                        @Form
                    </SimplyForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="()=> OnFormSubmit()">Ok</button>
                    <button type="button" class="btn btn-secondary" >Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public IList<TModel> Value { get; set; }

    [Parameter]
    public EventCallback<IList<TModel>> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment Form { get; set; }

    TModel beingEditedModel;
    int beingEditedModelIndex;
    //string name;
    //PropertyInfo propertyInfo;
    //string[] nameArray;

    protected override void OnInitialized()
    {
        //if (Name == null) Name = "MainTable";
        //if (Value != null)
        //{
        //    ItemData = new TableItemData(Value.Count);
        //    return;
        //}

        //if (Model == null) return;

        //Type modelType = Model.GetType();
        //var childModel = Model;

        //nameArray = Name.Split('.');

        //for (var i = 0; i < nameArray.Length; i++)
        //{
        //    propertyInfo = modelType.GetProperty(nameArray[i]);
        //    modelType = propertyInfo.PropertyType;
        //    if (childModel != null) childModel = propertyInfo.GetValue(childModel);
        //};

        //Value = childModel == null ? null : (IList<TModel>)childModel;
        //if (Value != null) ItemData = new TableItemData(Value.Count);
    }



    public Task AddModel()
    {
        beingEditedModelIndex = (Value == null) ? 0 : Value.Count;
        beingEditedModel = Activator.CreateInstance<TModel>();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ChangeModel(int index)
    {
        beingEditedModelIndex = index;
        beingEditedModel = Object.DeepClone(Value[index]);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task RemoveModel(int index)
    {
        Value.RemoveAt(index);
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task OnFormSubmit()
    {
        if (beingEditedModelIndex == 0 && Value == null || beingEditedModelIndex == Value.Count)
        {
            if (Value == null)
            {
                Value = new List<TModel>();

                //if (propertyInfo != null)
                //{
                //    object obj = Model;

                //    for (int i = 0; i < nameArray.Length - 1; i++)
                //    {
                //        var targetProp = obj.GetType().GetProperty(nameArray[i]);
                //        var nextType = targetProp.PropertyType;
                //        var nextObj = targetProp.GetValue(obj);
                //        if (nextObj == null)
                //        {
                //            nextObj = Activator.CreateInstance(nextType);
                //            targetProp.SetValue(obj, nextObj);
                //        }

                //        obj = nextObj;
                //    }
                //    propertyInfo.SetValue(obj, Value);

                //}
            }

            await OnItem.InvokeAsync(new TableItem<TModel>
            {
                Item = beingEditedModel,
                Flag = TableItemFlag.Added
            });

            Value.Add((TModel)beingEditedModel);
        }
        else
        {
            await OnItem.InvokeAsync(new TableItem<TModel>
            {
                Item = beingEditedModel,
                Flag = TableItemFlag.Changed
            });

            Object.DeepClone(beingEditedModel, Value[beingEditedModelIndex]);
        }

        await ValueChanged.InvokeAsync(Value);
        //if (Form != null) await Form.FieldValueChanged(Name);

        //await modal.Hide();
        beingEditedModel = default(TModel);
    }




}
