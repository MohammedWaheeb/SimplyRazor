@implements IComponentAction
@namespace SW.SimplyRazor
@inject NotifyService  notify
@using System.Reflection
@using System.Collections

@if (!string.IsNullOrEmpty(Text))
{
    <div class="row">
        <div class="col-auto">
            <label>@Text</label>
        </div>
    </div>
}
@if (Value != null && ((IEnumerable)Value).GetEnumerator().MoveNext())
{
    <CascadingValue IsFixed="true" Value="this" Name="FieldAction">

        <div style="@(Height==null ? "" : $"height: {Height};overflow-y: auto; ") overflow-x: auto;">
            <table class="table table-sm table-hover" style="@(Width == null ? "" : $"width: {Width};" )">
                <thead>
                    <tr>
                        @{
                            var enumerator = ((IEnumerable)Value).GetEnumerator();
                            enumerator.MoveNext();

                            <CascadingValue IsFixed="true" Value="FieldRole.ColumnName" Name="RenderMode">
                                <CascadingValue Value="enumerator.Current" Name="Model">
                                    @Columns
                                </CascadingValue>
                            </CascadingValue>
                        }
                    </tr>
                </thead>
                <tbody>
                    <CascadingValue IsFixed="true" Value="FieldRole.ColumnValue" Name="RenderMode">
                        @foreach (var item in (IEnumerable)Value)
                        {
                            <tr @key="item" @onclick="() => OnItem.InvokeAsync(new TableItem {Flag=TableItemFlag.Clicked, Item = item})">
                                <CascadingValue Value="item" Name="Model">
                                    @Columns
                                </CascadingValue>
                            </tr>
                        }
                    </CascadingValue>
                </tbody>
            </table>
        </div>
    </CascadingValue>
}
else if (Form != null)
{
    <div class="mb-1"><em><a href="JavaScript:void(0);" @onclick="() => Add()">click</a> to add...</em></div>
}

@if (newModel != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog modal-dialog-scrollable" role="document" style="display:block">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add or edit..</h5>
                </div>
                <div class="modal-body">
                    <SimplyForm Value="newModel" TModel="object">
                        @Form
                    </SimplyForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="()=> OnFormSubmit()"> Ok </button>
                    <button type="button" class="btn btn-secondary" @onclick="()=> CancelEdit()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public Type Type { get; set; }

    [Parameter]
    public object Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<TableItem> OnItem { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public RenderFragment Form { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }


    object newModel;
    object originalModel;
    MethodInfo addMethod;
    MethodInfo removeMethod;
    MethodInfo containsMethod;

    void Add() => newModel = Activator.CreateInstance(Type);

    void RemoveAll()
    {

    }

    void CancelEdit()
    {
        newModel = null;
        originalModel = null;
    }

    async public Task Invoke(string actionName, object actionValue)
    {
        switch (actionName.ToLower())
        {
            case "add":

                Add();
                break;

            case "remove":

                await OnItem.InvokeAsync(new TableItem
                {
                    Item = actionValue,
                    Flag = TableItemFlag.Removed
                });

                removeMethod.Invoke(Value, new object[] { actionValue });
                break;

            case "edit":

                originalModel = actionValue;
                newModel = originalModel.DeepClone(Type);
                StateHasChanged();
                break;
        }
    }

    protected override void OnInitialized()
    {
        addMethod = typeof(ICollection<>).MakeGenericType(Type).GetMethod("Add");
        removeMethod = typeof(ICollection<>).MakeGenericType(Type).GetMethod("Remove");
        containsMethod = typeof(ICollection<>).MakeGenericType(Type).GetMethod("Contains");
    }

    async Task OnFormSubmit()
    {
        try
        {
            if (originalModel == null)
            {
                if (Value == null) Value = Activator.CreateInstance(typeof(List<>).MakeGenericType(Type));

                await OnItem.InvokeAsync(new TableItem
                {
                    Item = newModel,
                    Flag = TableItemFlag.Added
                });

                if ((bool)containsMethod.Invoke(Value, new object[] { newModel }))
                    await notify.Publish(new UserMessage { Body = "Item exists.", Level = AlertLevel.Warning });
                else
                    addMethod.Invoke(Value, new object[] { newModel });

            }
            else
            {
                await OnItem.InvokeAsync(new TableItem
                {
                    Item = newModel,
                    Flag = TableItemFlag.Changed
                });

                if ((bool)containsMethod.Invoke(Value, new object[] { newModel }))
                    await notify.Publish(new UserMessage { Body = "Item exists.", Level = AlertLevel.Warning });
                else
                {
                    newModel.DeepClone(originalModel);
                }
            }

            await ValueChanged.InvokeAsync(Value);
            newModel = null;
            originalModel = null;

        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AlertLevel.Warning });
        }
    }

}
