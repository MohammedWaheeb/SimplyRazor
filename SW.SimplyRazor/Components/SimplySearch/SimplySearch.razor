
@namespace SW.SimplyRazor
@implements ISimplySearch

@inject NotifyService notify
@inject ComponentOptions componentOptions
@inject IJSRuntime JSRuntime

<CascadingValue Value="this" Name="Search">
    @Filters
    @Columns
</CascadingValue>

@if (FilterUrl != null)
{
    <SimplyQuery QueryUrl="@FilterUrl" ValueChanged="FilterQueryValueChanged" TResponse="IEnumerable<SearchyFilterSetup>"></SimplyQuery>
}

<div class="container-fluid">

    <div class="form-group row">
        <label for="filterSelect" class="col-sm-1 col-form-label">Search</label>
        <div class="col-sm-5 input-group ">
            <SimplySelect @bind-Value="filterValue"
                          EmptyText="Select filter"
                          Items="@(filterSetup.Select(e=>e.Text).ToList())" />

            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="FilterAddOnClick">Add</button>
            </div>
        </div>
        <div class="col-sm-6 text-right">
            <button type="button" @onclick="() => Search()" class="btn btn-secondary" style="width: 120px;">Search</button>
        </div>
    </div>



    @for (int i = 0; i < filters.Count; i++)
    {
        int index = i;
        <div class="form-group row" @key="filters[index]">
            <div class=" input-group col">

                <div class="input-group-prepend">
                    <span class="input-group-text" id="">@filters[index].Text</span>
                </div>

                <SimplySelect @bind-value="filters[index].Rule"
                              Items="filters[index].Rules"
                              TKey="SearchyRule" />

                @switch (filters[index].Type)
                {
                    case SearchyDataType.Text:

                        <input @bind="filters[index].ValueString" type="text" class="form-control" />
                        break;

                    case SearchyDataType.Number:

                        <input @bind="filters[index].ValueDecimal" type="number" class="form-control" />
                        break;

                    case SearchyDataType.Date:

                        <input @bind="filters[index].ValueDateTime" type="date" class="form-control" />
                        break;

                }
                <div class="input-group-append">
                    <button @onclick="@(e => RemoveFilter(index))" class="btn btn-outline-secondary" type="button"><span class="oi oi-x" /></button>
                </div>
            </div>
        </div>
    }

</div>

<div class="container-fluid mt-5">
    <div @ref="tableElementRef" />
</div>


@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public string FilterUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Index { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public EventCallback<string> OnRowClick { get; set; }

    int filterValue;
    bool tableInitialized;
    List<FilterModel> filters = new List<FilterModel>();
    ElementReference tableElementRef;
    SimplySearchInterop wrapper;
    List<ISearchyFilterSetup> filterSetup = new List<ISearchyFilterSetup>();
    List<IColumn> columns = new List<IColumn>();

    Task FilterAddOnClick(object e)
    {
        if (filterValue > 0)
        {
            filters.Add(new FilterModel(filterSetup[filterValue - 1]));
            filterValue = 0;
        }
        return Task.CompletedTask;
    }

    async Task RemoveFilter(int index)
    {
        if (filters[index].Required)
            await notify.Publish(new UserMessage { Body = "This filter is required for search.", Level = AttentionLevel.Warning });
        else
            filters.RemoveAt(index);
    }

    protected async override Task OnInitializedAsync()
    {

        //apiClient.HttpClient.BaseAddress = new Uri(SearchUrl);

        //columns = new List<IColumn>();

        //filters = new List<FilterModel>();
        //filterSetup = new List<ISearchyFilterSetup>();

        Index = Index ?? "Id";

        //filterSetup.AddRange(await apiClient.GetFilterSetup());

        //foreach (var fc in filterSetup)

        //    if (fc.Default || fc.Required) filters.Add(new FilterModel(fc));
    }

    async Task InitializeTable()
    {
        tableInitialized = true;
        var userIdentity = (await authenticationStateTask).User.Identity as ClaimsIdentity;

        string jwt = string.Empty;

        if (userIdentity.IsAuthenticated)
            jwt = userIdentity.GenerateJwt();

        wrapper = new SimplySearchInterop(this, JSRuntime, notify, $"{componentOptions.ApiBaseUri}{SearchUrl}", jwt, Index);
        await wrapper.Initialize(tableElementRef, columns);
    }

    async Task Search()
    {
        if (!tableInitialized) await InitializeTable();
        await wrapper.SetFilter(filters);
    }

    //Debouncer StepperDeboucer = new Debouncer(1000); // one second

    //private async Task FilterOnInput(ChangeEventArgs args)
    //{
    //    await StepperDeboucer.Debouce(() => { Console.WriteLine(args.Value); });
    //}

    async public Task AddFilterSetup(ISearchyFilterSetup filter)
    {
        filterSetup.Add(filter);
        if (filter.Default || filter.Required) filters.Add(new FilterModel(filter));
        await InvokeAsync(() => StateHasChanged());
    }

    async Task FilterQueryValueChanged(IEnumerable<SearchyFilterSetup> remoteFilterSetup)
    {
        foreach (var fc in remoteFilterSetup)

            await AddFilterSetup(fc);
    }

    public void RemoveFilterSetup(ISearchyFilterSetup filter)
    {
        filterSetup.Remove(filter);
    }

    public void AddColumn(IColumn column)
    {
        columns.Add(column);
    }
    public void RemoveColumn(IColumn column)
    {
        columns.Remove(column);
    }

    async public Task RowClick(string index)
    {
        await OnRowClick.InvokeAsync(index);
    }

}
