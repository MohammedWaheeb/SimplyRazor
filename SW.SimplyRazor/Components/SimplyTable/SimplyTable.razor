@typeparam TModel
@implements ISimplyTable
@namespace SW.SimplyRazor

<SimplyNotify Notification="DatalistReady" OnReceived="OnReceived"></SimplyNotify>

<div>
    <CascadingValue Value="this" Name="Table">
        @Header
    </CascadingValue>
</div>

@if (Value != null)
{
    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <CascadingValue Value="FieldRole.ColumnName" Name="RenderMode">
                    <SimplyForm Value="Value.First()">
                        @Fields
                    </SimplyForm>
                </CascadingValue>
            </tr>
        </thead>
        <tbody>
            @{
                for (var i = 0; i < Value.Count; i++)
                {
                    var itemIndex = i;
                    <tr @key="Value[itemIndex]">
                        <CascadingValue Value="this" Name="Table">
                            <CascadingValue Value="itemIndex" Name="ItemIndex">
                                <CascadingValue Value="FieldRole.ColumnValue" Name="RenderMode">
                                    <SimplyForm Value="Value[itemIndex]">
                                        @Fields
                                    </SimplyForm>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@if (beingEditedModel != null)
{
    <SimplyModal OnVisibilityChanged="OnModalVisibilityChanged">
        <Content>
            <CascadingValue Value="FieldRole.Input" Name="RenderMode">
                <SimplyForm Name="@($"{Name}{beingEditedModelIndex}")" Value="beingEditedModel" OnSubmit="()=> OnFormSubmit(context)">
                    @Fields
                </SimplyForm>
            </CascadingValue>
        </Content>
        <Footer>
            <button type="submit" class="btn btn-primary" form="@($"{Name}{beingEditedModelIndex}")">Ok</button>
            @*<button type="reset" class="btn btn-secondary" form="@($"{Name}{beingEditedModelIndex}")">Close</button>*@
        </Footer>
    </SimplyModal>
}

@code {

    [CascadingParameter(Name = "Form")]
    public ISimplyForm Form { get; set; }

    [CascadingParameter(Name = "Model")]
    public object Model { get; set; }

    [CascadingParameter(Name = "RenderMode")]
    public FieldRole RenderMode { get; set; }

    [Parameter]
    public IList<TModel> Value { get; set; }

    [Parameter]
    public EventCallback<IList<TModel>> ValueChanged { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string For { get; set; }

    [Parameter]
    public RenderFragment Fields { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }


    object beingEditedModel = null;
    int beingEditedModelIndex;

    protected override void OnInitialized()
    {
        if (Name == null) Name = "MainTable";
        if (Value != null) return;
        if (Model == null) return;

        Type modelType = Model.GetType();
        var childModel = Model;

        var arr = Name.Split('.');

        for (var i = 0; i < arr.Length; i++)
        {
            var pInfo = modelType.GetProperty(arr[i]);
            modelType = pInfo.PropertyType;
            if (childModel != null) childModel = pInfo.GetValue(childModel);
        };

        Value = childModel == null ? null : (IList<TModel>)childModel;
    }

    void OnReceived(DatalistReady datalist)
    {
        Value = ((IEnumerable<TModel>)datalist.Datalist).ToList();
    }

    //Task OnModalKeyDown(KeyboardEventArgs args)
    //{
    //    if (args.Code == "Enter") return OnFormSubmit(args);
    //    if (args.Code == "Escape") return OnFormReset(args);
    //    return Task.CompletedTask;
    //}

    public Task AddModel()
    {
        beingEditedModelIndex = -1;
        beingEditedModel = Activator.CreateInstance<TModel>();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task EditModel(int index)
    {
        beingEditedModelIndex = index;
        beingEditedModel = Value[index].DeepClone(); 
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task DeleteModel(int index)
    {
        Value.RemoveAt(index);
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task OnFormSubmit(ISimplyModal modal)
    {
        if (beingEditedModelIndex < 0)
        {
            if (Value == null) Value = new List<TModel>();
            Value.Add((TModel)beingEditedModel);
        }
        else

            beingEditedModel.DeepCloneTo(Value[beingEditedModelIndex]);

        await ValueChanged.InvokeAsync(Value);
        if (Form != null) await Form.FieldValueChanged(Name);

        await modal.Hide();
    }

    Task OnModalVisibilityChanged(bool visible)
    {
        if (!visible) beingEditedModel = null;
        return Task.CompletedTask;
    }
}
