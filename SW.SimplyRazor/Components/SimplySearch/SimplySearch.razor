@typeparam TModel
@namespace SW.SimplyRazor
@inject MapiClientFactory mapiClientFactory
@inject NavigationManager nav
@inject NotifyService notify
@using SW.ModelApi
@using Humanizer

<SimplyNotify Notification="PageIndexRequested" OnReceived="OnPageIndexRequested" />

<CascadingValue Value="filterConfigs" Name="FilterConfigs">
    @ChildContent
</CascadingValue>

<SimplyAlertHub></SimplyAlertHub>

<form id="searchform" @onsubmit="()=> Search(0)"></form>

<div class="form-group row">
    <label for="filterSelect" class="col-sm-1 col-form-label">Search</label>
    <div class="col-sm-5 input-group ">
        <SimplySelect @bind-Value="filterValue"
                      EmptyText="Select filter"
                      StringList="@(filterConfigs.Select(e=>e.Text))" />

        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="FilterAddOnClick">Add</button>
        </div>
    </div>
    <div class="col-sm-6 text-right">
        <SimplyButton Working="searching" form="searchform" class="btn btn-secondary" style="width: 120px;" type="submit">
            <Text>Search</Text>
        </SimplyButton>
    </div>
</div>

@for (int i = 0; i < filters.Count; i++)
{
    int index = i;
    <div class="form-group row">
        <div class=" input-group col">

            <div class="input-group-prepend">
                <span class="input-group-text" id="">@filters[index].Text</span>
            </div>

            <SimplySelect @bind-value="filters[index].Rule"
                          KeyValuePairList="@(filters[index].Rules.ToDictionary(e => e, e=> e.Humanize()))" />

            @switch (filters[index].Type)
            {
                case SearchyFilterConfigType.Text:

                    <input @bind="filters[index].ValueString" type="text" class="form-control"  form="searchform" required="@filters[index].Required" />
                    break;

                case SearchyFilterConfigType.Number:

                    <input @bind="filters[index].ValueDecimal" type="number" class="form-control" form="searchform" required="@filters[index].Required" />
                    break;

                case SearchyFilterConfigType.Date:

                    <input @bind="filters[index].ValueDateTime" type="date" class="form-control" form="searchform" required="@filters[index].Required" />
                    break;

            }
            <div class="input-group-append">
                <button @onclick="@(e => RemoveFilter(index))" class="btn btn-outline-secondary" type="button"><span class="oi oi-x" /></button>
            </div>
        </div>
    </div>
}


@code{

    //[Parameter]
    //public EventCallback<IEnumerable<TModel>> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    int filterValue;
    List<FilterModel> filters;
    List<ISearchyFilterConfig> filterConfigs { get; set; }

    Task FilterAddOnClick(object e)
    {
        if (filterValue > 0)
        {
            filters.Add(new FilterModel(filterConfigs[filterValue - 1]));
            filterValue = 0;
        }
        return Task.CompletedTask;
    }

    async Task RemoveFilter(int index)
    {
        if (filters[index].Required)
            await notify.Publish(new UserMessage { Body = "This filter is required for search.", Level = AttentionLevel.Warning });
        else
            filters.RemoveAt(index);
    }


    protected async override Task OnInitializedAsync()
    {
        filters = new List<FilterModel>();
        filterConfigs = new List<ISearchyFilterConfig>();
        var client = mapiClientFactory.GetClient<TModel>();
        filterConfigs.AddRange(await client.GetFilterConfigs());

        foreach (var fc in filterConfigs)

            if (fc.Default || fc.Required) filters.Add(new FilterModel(fc) { Rule = fc.Rules.First() });

    }

    bool searching;

    async Task Search(int pageIndex)
    {

        try
        {
            searching = true;

            var sreq = new SearchyRequest(new SearchyCondition(filters))
            {
                PageIndex = pageIndex,
                PageSize = PageSize
            };

            var client = mapiClientFactory.GetClient<TModel>();
            var sres = await client.Search(sreq);

            //await ValueChanged.InvokeAsync(sres.Result);
            await notify.Publish(new DatalistReady
            {
                Datalist = sres.Result,
                TotalCount = sres.TotalCount,
                Count = sres.Result.Count(),
                PageSize = sreq.PageSize,
                PageIndex = pageIndex
            });
        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Error });
        }
        finally
        {
            searching = false;
        }
    }

    async Task OnPageIndexRequested(PageIndexRequested indexRequested)
    {
        await Search(indexRequested.Index);
    }

    Debouncer StepperDeboucer = new Debouncer(1000); // one second


    private async Task FilterOnInput(ChangeEventArgs args)
    {
        await StepperDeboucer.Debouce(() => { Console.WriteLine(args.Value); });
    }

    private class FilterModel : ISearchyFilterConfig, ISearchyFilterTyped
    {
        public FilterModel(ISearchyFilterConfig isfc)
        {

            Type = isfc.Type;
            Text = isfc.Text;
            Field = isfc.Field;
            Required = isfc.Required;
            Default = isfc.Default;
            Rules = isfc.Rules;
        }

        public object Value { get; set; }
        public SearchyRule Rule { get; set; }
        public string Type { get; set; }
        public string Text { get; set; }
        public string Field { get; set; }
        public ICollection<SearchyRule> Rules { get; set; }
        public bool Required { get; set; }
        public bool Default { get; set; }

        public decimal? ValueDecimal { get; set; }
        public string ValueString { get; set; }
        public DateTime? ValueDateTime { get; set; }
        public decimal[] ValueDecimalArray { get; set; }
        public string[] ValueStringArray { get; set; }
        public DateTime[] ValueDateTimeArray { get; set; }

    }

}
