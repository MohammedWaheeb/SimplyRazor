@namespace SW.SimplyRazor
@using System.Collections
@using System.Reflection
@{
    var type = typeof(PrimitiveTypeWrapper<>).MakeGenericType(State.PropertyInfo.PropertyType.GetGenericArguments()[0]);

    <SimplyTable @bind-Value="wrapper" OnItem="OnItem" Text="@State.Text" Type="type">
        <Columns>
            <Field Text="Action">
                <ColumnHeader>
                    Action (<a href="JavaScript:void(0);" @onclick="@(() => context.Action.Invoke("add", null))">add</a>)
                </ColumnHeader>
                <ColumnValue>
                    <a href="JavaScript:void(0);" @onclick="@(() => context.Action.Invoke("remove", context.Model))">Remove</a>
                </ColumnValue>
            </Field>
            <Field Name="Value" Lookup="@State.Lookup" />
        </Columns>
        <Form>
            <Field Name="Value" Lookup="@State.Lookup" />
        </Form>
    </SimplyTable>
}


@code {

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public IField State { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    object value { get; set; }
    object wrapper;
    Type collectionType;
    MethodInfo addMethod;
    MethodInfo removeMethod;

    protected override void OnInitialized()
    {
        collectionType = State.PropertyInfo.PropertyType.GetGenericArguments()[0];
        addMethod = typeof(List<>).MakeGenericType(collectionType).GetMethod("Add");
        removeMethod = typeof(List<>).MakeGenericType(collectionType).GetMethod("Remove");


        if (State.Value != null)
        {
            value = State.Value;
            var wrapperType = typeof(PrimitiveTypeWrapper<>).MakeGenericType(collectionType);
            var _wrapper = Activator.CreateInstance(typeof(List<>).MakeGenericType(wrapperType));
            var _addMethod = _wrapper.GetType().GetMethod("Add");
            foreach (var item in (IEnumerable)value)
            {
                var obj = Activator.CreateInstance(wrapperType);
                obj.GetType().GetProperty("Value").SetValue(obj, item);
                _addMethod.Invoke(_wrapper, new object[] { obj });

            }

            wrapper = _wrapper;
        }
    }

    async Task OnItem(TableItem tableItem)
    {

        if (value == null) value = Activator.CreateInstance(typeof(List<>).MakeGenericType(collectionType));

        var typedValue = tableItem.Item.GetType().GetProperty("Value").GetValue(tableItem.Item);

        if (typedValue==null) throw new Exception("Cannot insert null value.");

        if (tableItem.Flag == TableItemFlag.Added)

            addMethod.Invoke(value, new object[] { typedValue });

        if (tableItem.Flag == TableItemFlag.Removed)

            removeMethod.Invoke(value, new object[] { typedValue });

        await ValueChanged.InvokeAsync(value);

    }

}
