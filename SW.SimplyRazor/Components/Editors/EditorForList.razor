@namespace SW.SimplyRazor
@using System.Collections
@using System.Reflection

@if (wrapperType != null)
{
    <SimplyTable @bind-Value="wrapper" OnItem="OnItem" Text="@State.Text" Type="wrapperType">
        <Columns>
            <Field Text="Action">
                <ColumnHeader>
                    Action (<a href="JavaScript:void(0);" @onclick="@(() => context.Action.Invoke("add", null))">add</a>)
                </ColumnHeader>
                <ColumnValue>
                    <a href="JavaScript:void(0);" @onclick="@(() => context.Action.Invoke("remove", context.Model))">Remove</a>
                </ColumnValue>
            </Field>
            <Field Name="Value" Lookup="@State.Lookup" />
        </Columns>
        <Form>
            <Field Name="Value" Lookup="@State.Lookup" />
        </Form>
    </SimplyTable>
}

@code {

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public IField State { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    object value;
    object wrapper;
    Type wrapperType;
    //Type wrapperListType;
    Type collectionType;

    MethodInfo addMethod;
    MethodInfo removeMethod;
    MethodInfo containsMethod;

    MethodInfo _addMethod;
    MethodInfo _removeMethod;
    MethodInfo _containsMethod;

    protected override void OnInitialized()
    {
        collectionType = State.PropertyInfo.PropertyType.GetGenericArguments()[0];
        wrapperType = typeof(PrimitiveTypeWrapper<>).MakeGenericType(collectionType);
        //wrapperListType = ;

        addMethod = typeof(ICollection<>).MakeGenericType(collectionType).GetMethod("Add");
        removeMethod = typeof(ICollection<>).MakeGenericType(collectionType).GetMethod("Remove");
        containsMethod = typeof(ICollection<>).MakeGenericType(collectionType).GetMethod("Contains");

        _addMethod = typeof(ICollection<>).MakeGenericType(wrapperType).GetMethod("Add");
        _removeMethod = typeof(ICollection<>).MakeGenericType(wrapperType).GetMethod("Remove");
        _containsMethod = typeof(ICollection<>).MakeGenericType(wrapperType).GetMethod("Contains");

    }

    protected override void OnParametersSet()
    {
        if (State.Value != null)
        {
            value = State.Value;
            if (wrapper == null) wrapper = Activator.CreateInstance(typeof(List<>).MakeGenericType(wrapperType));

            foreach (var item in new ArrayList((ICollection)wrapper))
            {
                var itemValue = wrapperType.GetProperty("Value").GetValue(item);
                if (!(bool)containsMethod.Invoke(value, new object[] { itemValue }))
                    _removeMethod.Invoke(wrapper, new object[] { item });
            }

            foreach (var item in (IEnumerable)value)
            {
                var obj = Activator.CreateInstance(wrapperType);
                wrapperType.GetProperty("Value").SetValue(obj, item);
                if (!(bool)_containsMethod.Invoke(wrapper, new object[] { obj }))
                    _addMethod.Invoke(wrapper, new object[] { obj });
            }
        }
    }

    async Task OnItem(TableItem tableItem)
    {

        if (value == null) value = Activator.CreateInstance(typeof(List<>).MakeGenericType(collectionType));

        var typedValue = tableItem.Item.GetType().GetProperty("Value").GetValue(tableItem.Item);

        if (typedValue == null) throw new Exception("Cannot insert null value.");

        if (tableItem.Flag == TableItemFlag.Added)

            addMethod.Invoke(value, new object[] { typedValue });

        if (tableItem.Flag == TableItemFlag.Removed)

            removeMethod.Invoke(value, new object[] { typedValue });

        await ValueChanged.InvokeAsync(value);

    }

}
