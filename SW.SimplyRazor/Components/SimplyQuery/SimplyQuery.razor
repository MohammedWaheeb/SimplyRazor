@typeparam TResponse
@namespace SW.SimplyRazor
@inject NotifyService notify
@inject ApiService apiService

@if (currentResult != null && currentResult.Success)
{
    if (Result != null)
    {
        @Result(currentResult.Response)
    }
}
else if (currentResult != null)
{
    if (Error == null)
    {
        @:Error
    }
    else
    {
        @Error
    }
}
else if (Loading == null)
{
    @:Loading...
}
else
{
    @Loading
}

@code {

    [Parameter]
    public string QueryUrl { get; set; }

    [Parameter]
    public EventCallback<ApiResult<TResponse>> OnResult { get; set; }

    [Parameter]
    public bool Working { get; set; }

    [Parameter]
    public EventCallback<bool> WorkingChanged { get; set; }

    [Parameter]
    public RenderFragment<TResponse> Result { get; set; }

    [Parameter]
    public RenderFragment Error { get; set; }

    [Parameter]
    public RenderFragment Loading { get; set; }

    ApiResult<TResponse> currentResult;

    async public override Task SetParametersAsync(ParameterView parameters)
    {
        var queryUrl = parameters.GetValueOrDefault<string>("QueryUrl");
        var oldQueryUrl = QueryUrl;
        await base.SetParametersAsync(parameters);

        if (string.IsNullOrEmpty(queryUrl) || queryUrl == oldQueryUrl) return;

        //currentResult = null;

        await WorkingChanged.InvokeAsync(true);

        var result = await apiService.GetAsync<TResponse>(queryUrl);

        if (result.StatusCode == 0 || result.StatusCode >= 500)
        {
            await notify.Publish(new UserMessage { Body = "Server error.", Level = AlertLevel.Error });
        }

        await OnResult.InvokeAsync(result);
        await WorkingChanged.InvokeAsync(false);

        currentResult = result;

        StateHasChanged();
    }
}
