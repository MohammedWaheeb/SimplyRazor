@typeparam TModel
@namespace SW.SimplyRazor
@inject SearchyClient searchyService
@inject NavigationManager nav
@using SW.Searchy
@using Humanizer

@if (filters is null) return;

<CascadingValue Value="FilterConfigs" Name="FilterConfigs">
    @ChildContent
</CascadingValue>

<div class="row">
    <label for="filterSelect" class="col-auto col-form-label">Search</label>
    <div class="col-auto">

        <div class="input-group">
            <SimplySelect @bind-Value="filterValue"
                          EmptyText="Select filter"
                          StringList="@(FilterConfigs.Select(e=>e.Text))">

            </SimplySelect>

            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="FilterAddOnClick">Add</button>
            </div>
        </div>
        @*<select @bind="filterValue" class="form-control" id="filterSelect">
                <option value="0">Select a filter</option>
                @{
                    int itemIndex = 1;
                    foreach (var item in FilterConfigs)
                    {
                        <option value="@itemIndex">@item.DisplayName</option>
                        itemIndex++;
                    }
                }
            </select>*@
    </div>
    <div class="col text-right mb-2">
        <button type="submit" class="btn btn-primary" @onclick="SearchOnClick">Search</button>
    </div>
</div>

@{
    int lineIndex = 0;
    foreach (var item in filters)
    {
        <div class="input-group mb-1">
            <div class="input-group-prepend">
                <span class="input-group-text" id="">@item.Text</span>
            </div>
            <SimplySelect @bind-value="item.Operator"
                          EmptyText="Select condition"
                          KeyValuePairList="@(SearchyFilterConfigType.RulesFor(item.Type).ToDictionary((e) => (int)e, (e)=> e.ToString().Humanize()))">

            </SimplySelect>
            @{switch (item.Type)
                {
                    case SearchyFilterConfigType.String:
                        {

                            <input type="text" class="form-control" @bind="item.ValueString" />

                            break;
                        }
                    case SearchyFilterConfigType.Int:
                        {
                            <input @bind="item.ValueInt" type="number" class="form-control" />

                            break;
                        }
                    case SearchyFilterConfigType.Date:
                        {
                            <input @bind="item.ValueDate" type="date" class="form-control" />
                            break;
                        }
                }
                int thisLine = lineIndex;
                <div class="input-group-append">
                    <button @onclick="@(e => filters.RemoveAt(thisLine))" class="btn btn-outline-secondary" type="button"><span class="oi oi-x" /></button>
                </div>
            }

        </div>

        lineIndex++;
    }
}

@code{

    List<ISearchyFilterConfig> FilterConfigs { get; set; }

    [Parameter]
    public IList<TModel> Value { get; set; }

    [Parameter]
    public EventCallback<IList<TModel>> ValueChanged { get; set; }

    [Parameter]
    public PageInfo PageInfo { get; set; }

    [Parameter]
    public EventCallback<PageInfo> PageInfoChanged { get; set; }

    [Parameter]
    public int PageProbablyLast { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    int filterValue;
    List<FilterState> filters;

    Task FilterAddOnClick(MouseEventArgs e)
    {
        if (filterValue > 0)
        {
            filters.Add(new FilterState(FilterConfigs[filterValue - 1]));
            filterValue = 0;
        }
        return Task.CompletedTask;
    }


    protected async override Task OnInitializedAsync()
    {
        if (PageInfo is null) PageInfo = new PageInfo(20); 

        if (Value is null) Value = new List<TModel>();

        FilterConfigs = new List<ISearchyFilterConfig>();

        searchyService.Client.BaseAddress = new Uri(nav.BaseUri);
        FilterConfigs.AddRange(await searchyService.GetFilterConfigs(typeof(TModel).FullName));

        filters = new List<FilterState>();
    }

    private async Task SearchOnClick(EventArgs e)
    {
        var typedFilters = filters.Select(f => (ISearchyFilterTyped)f).ToList();
        var sr = new SearchyRequest
        {
            Conditions = new List<SearchyConditon> { new SearchyConditon(typedFilters) },
            PageIndex = PageInfo.Index ,
            PageSize = PageInfo.Size
        };

        var result = (await searchyService.Search<TModel>(sr)).Result.ToList();
        await ValueChanged.InvokeAsync(result);
    }

    Debouncer StepperDeboucer = new Debouncer(1000); // one second


    private async Task FilterOnInput(ChangeEventArgs args)
    {
        await StepperDeboucer.Debouce(() => { Console.WriteLine(args.Value); });
    }

}