@typeparam TModel
@implements ITableAction
@implements IFieldAction
@namespace SW.SimplyRazor
@inject NotifyService  notify

<div class="row">
    @if (Text != null)
    {
        <div class="col-auto">
            <label>@Text</label>
        </div>
    }
    @if (NewText != null)
    {
        @*<div class="col-auto">
                <a href="javascript:void();"  @onclick="() => Add()">@NewText</a>
            </div>*@
    }
</div>

@if (Value?.Count > 0)
{
    <CascadingValue IsFixed="true" Value="this" Name="FieldAction">
        <SimplyGrid Data="Value">
            @Columns
        </SimplyGrid>
    </CascadingValue>
}
else
{
    <div class="mb-3"><em>None <a href="javascript:void();" @onclick="() => Add()">click</a> to add...</em></div>
}

@if (newModel != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog modal-dialog-scrollable" role="document" style="display:block">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add or edit..</h5>
                </div>
                <div class="modal-body">
                    <SimplyForm Value="newModel">
                        @Form
                    </SimplyForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="()=> OnFormSubmit()"> Ok </button>
                    <button type="button" class="btn btn-secondary" @onclick="()=> CancelEdit()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public ICollection<TModel> Value { get; set; }

    [Parameter]
    public EventCallback<ICollection<TModel>> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string NewText { get; set; }

    //[Parameter]
    //public RenderFragment Footer { get; set; }

    [Parameter]
    public RenderFragment Form { get; set; }

    TModel newModel;
    TModel originalModel;

    async public Task Add()
    {
        newModel = Activator.CreateInstance<TModel>();
    }

    async public Task RemoveAll()
    {

    }

    void CancelEdit()
    {
        newModel = default(TModel);
        originalModel = default(TModel);
    }

    async public Task Invoke(string actionName, object actionValue)
    {

        switch (actionName.ToLower())
        {
            case "add":

                await Add();
                break;

            case "remove":

                await OnItem.InvokeAsync(new TableItem<TModel>
                {
                    Item = (TModel)actionValue,
                    Flag = TableItemFlag.Removed
                });

                Value.Remove((TModel)actionValue);
                break;

            case "edit":

                originalModel = (TModel)actionValue;
                newModel = Object.DeepClone(originalModel);
                break;
        }
    }

    //public Task ChangeModel(int index)
    //{
    //    beingEditedModelIndex = index;
    //    beingEditedModel = Object.DeepClone(Value.GetAt(index));
    //    //StateHasChanged();
    //    return Task.CompletedTask;
    //}

    //async public Task RemoveModel(int index)
    //{

    //    await OnItem.InvokeAsync(new TableItem<TModel>
    //    {
    //        Item = Value.GetAt(index),
    //        Flag = TableItemFlag.Removed
    //    });

    //    Value.RemoveAt(index);

    //    //StateHasChanged();

    //}

    async Task OnFormSubmit()
    {
        try
        {
            if (originalModel == null)
            {
                if (Value == null) Value = new List<TModel>();

                await OnItem.InvokeAsync(new TableItem<TModel>
                {
                    Item = newModel,
                    Flag = TableItemFlag.Added
                });

                Value.Add(newModel);
            }
            else
            {
                await OnItem.InvokeAsync(new TableItem<TModel>
                {
                    Item = newModel,
                    Flag = TableItemFlag.Changed
                });

                Object.DeepClone(newModel, originalModel);
            }

            await ValueChanged.InvokeAsync(Value);
            newModel = default(TModel);
            originalModel = default(TModel);

        }
        catch (Exception ex)
        {
            await notify.Publish(new UserMessage { Body = ex.Message, Level = AttentionLevel.Warning });
        }
    }

}
