@typeparam TKey
@namespace SW.SimplyRazor
@using System.Collections
@using System.Linq
@using Humanizer
@inject MapiClientFactory mapiClientFactory
@using SW.ModelApi


<select @onchange="SelectValueChanged" class="form-control">

    @if (EmptyText != null)
    {
        <option selected="@(Value == null || Value.Equals(default(TKey) ))" value=" ">@EmptyText</option>
    }

    @if (Items == null)
    {
        <option>loading...</option>
    }
    else
    {
        int index = 1;
        foreach (dynamic itemUntyped in Items)
        {
            dynamic key = null;
            dynamic value = null;

            Type enumerableType = itemUntyped.GetType();

            if (enumerableType == typeof(string))
            {
                key = index;
                value = itemUntyped;
            }
            else if (enumerableType.BaseType == typeof(Enum))
            {
                key = itemUntyped;
                value = ((Enum)itemUntyped).Humanize();
            }
            else
            {
                key = itemUntyped.Key;
                value = itemUntyped.Value;
            }

            <option selected="@(Value != null && Value.ToString() == key.ToString() )" value="@key">@value</option>

            index++;
        }
    }

</select>


@code {

    [Parameter]
    public TKey Value { get; set; }

    [Parameter]
    public EventCallback<TKey> ValueChanged { get; set; }

    [Parameter]
    public IEnumerable Items { get; set; }

    [Parameter]
    public EventCallback ItemsLoaded { get; set; }

    [Parameter]
    public string Lookup { get; set; }

    [Parameter]
    public string EmptyText { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }


    async protected override Task OnInitializedAsync()
    {

        if (Lookup != null)
        {
            var client = mapiClientFactory.GetClient(Lookup);

            Items = await client.LookupList();

        }
        else if (Items == null && typeof(TKey).BaseType == typeof(Enum))
        {
            var lst = new List<KeyValuePair<TKey, string>>();
            foreach (var item in Items)
            {
                lst.Add(new KeyValuePair<TKey, string>((TKey)item, Enum.GetName(typeof(TKey), item).Humanize()));
            }
            Items = lst;
        }

    }

    async Task SelectValueChanged(ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            Value = default(TKey);
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey) == typeof(string))
        {
            Value = (TKey)args.Value;
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey) == typeof(int))
        {
            Value = (TKey)(object)int.Parse(args.Value.ToString());
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey).BaseType == typeof(Enum))
        {
            Value = (TKey)(object)Enum.Parse(typeof(TKey), args.Value.ToString());
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey) == typeof(object))
        {
            Value = (TKey)args.Value;
            await ValueChanged.InvokeAsync(Value);
        }

    }


}
