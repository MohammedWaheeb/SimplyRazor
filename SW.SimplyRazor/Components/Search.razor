@typeparam TModel
@namespace SW.SimplyRazor
@implements ISimplySearch
@implements ISimplySearchCommand
@inject NotifyService notify
@inject IServiceProvider serviceProvider

<CascadingValue IsFixed="true" Value="this" Name="Search">
    <CascadingValue IsFixed="true" Value="typeof(TModel)" Name="ModelType">
        <CascadingValue IsFixed="true" Value="FieldRole.Filter" Name="RenderMode">
            @Filters
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@{
    int index = 0;

    foreach (var filter in Value.Filters)
    {
        var f1 = filter;

        <div class="row mb-2" @key="filter">
            <div class="input-group col-6">
                <div class="input-group-prepend">
                    <SimplySelect Value="filter.Field"
                                  ValueChanged="value => OnFilterChange(filter, value)"
                                  EmptyText="select"
                                  Items="filterSetup.ToDictionary(k => k.Field, v => v.Text)"
                                  TKey="string"
                                  class="form-control" />

                </div>
                <SimplySelect Value="(int)filter.Rule"
                              ValueChanged="value => OnRuleChange(filter, value)"
                              Items="filter.CompactRules"
                              TKey="int"
                              class="form-control"
                              style="max-width: 90px" />

                <SimplyForm @bind-Value="f1">

                    @switch (filter.Type)
                        {
                            case SearchyDataType.Number:
                            <Field Name="ValueDecimal" Text="" Lookup="@filter.Lookup" />
                                break;

                            case SearchyDataType.Date:

                                if (filter.DateMode == DateMode.Single)
                                {
                                <Field Name="ValueDateTime" Text="" InputType="InputType.Calendar" />
                                }
                                else
                                {
                                <Field Name="ValueDateTimeArray" Text="" />
                                }

                                break;

                            default:

                                if (filter.Lookup == null)
                                {
                                <Field Name="ValueString" Text="" />
                                }
                                else
                                {
                                <Field Name="ValueString" Text="" Lookup="@filter.Lookup" TypeAhead="@filter.TypeAhead" />
                                }

                                break;

                        }
                </SimplyForm>

                <div class="input-group-append">

                    @if (index == Value.Filters.Count - 1)
                    {
                        <button @onclick="e => Value.Filters.Add(new FilterModel())" class="btn btn-outline-secondary " type="button">+</button>
                    }
                    else
                    {
                        <button @onclick="e => Value.Filters.Remove(filter)" class="btn btn-outline-secondary " type="button">x</button>
                    }

                </div>

            </div>
            @if (index == 0)
            {
                <div class="col-auto pl-0">
                    <BusyButton OnClick="bb => DoSearch(bb, 0)" class="btn btn-primary" style="width: 80px">
                        <Title>
                            Search
                        </Title>
                    </BusyButton>

                    @if (Commands != null)
                    {
                        @Commands(this)
                    }
                </div>
            }
        </div>

        index++;
    }

    if (result != null && result.Result.Count() > 0)
    {
        <div class="mb-3">
            <SimplyTable Value="result.Result" Height="@Height" Width="@Width" Type="typeof(TModel)" OnItem="ti => OnTableItem(ti)">
                <Columns>
                    @Columns
                </Columns>
            </SimplyTable>
        </div>
        <Pager TotalCount="result.TotalCount" Count="result.Result.Count()" Page="Value.Page" PageSize="PageSize" PageChanged="page => DoSearch(null, page)"></Pager>
    }
}

@code{

    [Parameter]
    public IBasicApiClient ApiClient { get; set; }

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public RenderFragment<ISimplySearchCommand> Commands { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public SimplySearchValue Value { get; set; }

    [Parameter]
    public EventCallback<SimplySearchValue> ValueChanged { get; set; }

    SearchyResponse<TModel> result;

    protected override void OnInitialized()
    {
        if (Value == null || Value.Filters.Count == 0)
        {
            Value = new SimplySearchValue();
            Value.Filters.Add(new FilterModel());
        }
    }

    Task OnTableItem(TableItem tableItem)
    {
        return OnItem.InvokeAsync(new TableItem<TModel>
        {
            Flag = tableItem.Flag,
            Item = (TModel)tableItem.Item
        });
    }

    void OnRuleChange(FilterModel filter, int rule)
    {
        filter.Rule = (SearchyRule)rule;
        if (filter.Rule == SearchyRule.Range)
        {
            filter.DateMode = DateMode.Range;
            filter.ValueDateTime = null;
        }
        else
        {
            filter.DateMode = DateMode.Single;
            filter.ValueDateTimeArray = null;
        }
    }

    void OnFilterChange(FilterModel filter, string value)
    {
        filter.Field = value;
        filter.ValueString = null;
        filter.ValueStringArray = null;
        filter.ValueDecimal = null;
        filter.ValueDecimalArray = null;
        filter.ValueDateTime = null;
        filter.ValueDateTimeArray = null;
        filter.Rule = default;

        var selectedFilterSetup = filterSetup.Where(fs => fs.Field == value).FirstOrDefault();
        if (selectedFilterSetup == null)
        {
            filter.Rules = new List<SearchyRule>();
        }
        else
        {
            filter.Rule = selectedFilterSetup.Rules.First();
            filter.Rules = selectedFilterSetup.Rules;
            filter.Type = selectedFilterSetup.Type;
            filter.Lookup = selectedFilterSetup.Lookup;
            filter.TypeAhead = selectedFilterSetup.TypeAhead;
        }
    }

    async Task DoSearch(IBusyButton bb, int page)
    {
        Value.Page = page;

        var apiClient = serviceProvider.GetApiClient(ApiClient);
        var apiResult = await apiClient.Search<TModel>($"{SearchUrl}?{Value.ToSearchyRequest(PageSize).ToString()}");
        await notify.NotifyOnApiResult(apiResult);
        if (apiResult.Success)
        {
            if (apiResult.Response.Result.Count() == 0)
            {
                await notify.Publish(new UserMessage { Body = "Search returned no results.", Level = AlertLevel.Info });
            }
            result = apiResult.Response;
        }
        if (bb != null) await bb.SetBusy(false);
        await ValueChanged.InvokeAsync(Value);
    }

    ICollection<SimplySearchFilterSetup> filterSetup = new List<SimplySearchFilterSetup>();

    async public Task AddFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetup.Add(filter);
        await InvokeAsync(() => StateHasChanged());
    }

    public void RemoveFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetup.Remove(filter);
    }

    public SearchyRequest SearchyRequest => Value.ToSearchyRequest(PageSize);
}
